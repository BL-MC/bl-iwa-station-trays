[
    {
        "id": "e1a1e83b4bc1e188",
        "type": "tab",
        "label": "blinky-picoW-demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "46e7f7a7d011ce91",
        "type": "tab",
        "label": "ochams",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f02e2abde5efb55b",
        "type": "tab",
        "label": "shellyplug-s",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a41147412bb7ddc4",
        "type": "tab",
        "label": "shelly-ht",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13a1f6b35420cd30",
        "type": "tab",
        "label": "blinky-hpTempBypass",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f15328c23f2596ab",
        "type": "tab",
        "label": "blinky-pico-ivt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "366ee1704c7abe9f",
        "type": "tab",
        "label": "blinky-DS18B20-p",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7d1a76edaab21298",
        "type": "tab",
        "label": "entsoe spot Price",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b3a029ced1268723",
        "type": "tab",
        "label": "euroExchangeRate",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43847f8fb3ca821a",
        "type": "group",
        "z": "f02e2abde5efb55b",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "a2d4d8d23e0fb663"
        ],
        "x": 54,
        "y": 39
    },
    {
        "id": "2e36a704e5b34131",
        "type": "group",
        "z": "f02e2abde5efb55b",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "21dc7d3495acccbd"
        ],
        "x": 774,
        "y": 139
    },
    {
        "id": "6b1d72a065437914",
        "type": "group",
        "z": "f02e2abde5efb55b",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "a2d983d5ac16f767"
        ],
        "x": 754,
        "y": 459
    },
    {
        "id": "6be74e15039dce40",
        "type": "group",
        "z": "f02e2abde5efb55b",
        "name": "",
        "style": {
            "stroke": "#000000",
            "label": true,
            "fill": "#487895",
            "color": "#ffffff"
        },
        "nodes": [
            "6dae18247871f69e"
        ],
        "x": 274,
        "y": 359
    },
    {
        "id": "932976b1fa8413e3",
        "type": "group",
        "z": "f02e2abde5efb55b",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#487895",
            "label": true
        },
        "nodes": [
            "dcc23eb60bfbcc66"
        ],
        "x": 274,
        "y": 459
    },
    {
        "id": "cbfba956c59a29f1",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "d1b4e4f77e6221a3"
        ],
        "x": 54,
        "y": 39,
        "w": 232,
        "h": 82
    },
    {
        "id": "e6eae5c8a21d720d",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "c3b1f5e107f72224"
        ],
        "x": 774,
        "y": 139,
        "w": 212,
        "h": 82
    },
    {
        "id": "ef5cb8e350f51d8c",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "7ff1e43e3c9dd7c7"
        ],
        "x": 754,
        "y": 451.5,
        "w": 232,
        "h": 97
    },
    {
        "id": "40e56362c23599cc",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#000000"
        },
        "nodes": [
            "5e7d2de841bcb0c1"
        ],
        "x": 1034,
        "y": 519,
        "w": 172,
        "h": 82
    },
    {
        "id": "b6c18360e72ab474",
        "type": "group",
        "z": "a41147412bb7ddc4",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "baaf6272d04085cc"
        ],
        "x": 54,
        "y": 39
    },
    {
        "id": "52624d73fbc9df62",
        "type": "group",
        "z": "a41147412bb7ddc4",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "2b964c7c5cf612ad"
        ],
        "x": 774,
        "y": 139
    },
    {
        "id": "4d3ae7b8c44f12ab",
        "type": "group",
        "z": "a41147412bb7ddc4",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "34f399d7fd0bece7"
        ],
        "x": 754,
        "y": 459
    },
    {
        "id": "c58cb8f355a3b5c9",
        "type": "group",
        "z": "a41147412bb7ddc4",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#487895",
            "label": true
        },
        "nodes": [
            "c8d372a8aa11586a"
        ],
        "x": 274,
        "y": 459
    },
    {
        "id": "4c23b36220bee4a5",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "e02be85c6ad51169"
        ],
        "x": 54,
        "y": 39
    },
    {
        "id": "89d000920b3da55b",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "ba3d2d81576347eb"
        ],
        "x": 774,
        "y": 139
    },
    {
        "id": "9b262d7db85e79ca",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "5af8b7692afda891"
        ],
        "x": 754,
        "y": 451.5
    },
    {
        "id": "cf376f876bd4e4ee",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#487895",
            "label": true
        },
        "nodes": [
            "707fa096b24fe812"
        ],
        "x": 274,
        "y": 459
    },
    {
        "id": "52a1cbfb51e76281",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#000000"
        },
        "nodes": [
            "bae68adcc47d0dbd"
        ],
        "x": 1034,
        "y": 519
    },
    {
        "id": "4c64c2d1f7c75276",
        "type": "group",
        "z": "13a1f6b35420cd30",
        "name": "",
        "style": {
            "stroke": "#000000",
            "label": true,
            "fill": "#487895",
            "color": "#ffffff"
        },
        "nodes": [
            "be896ff114dcd321"
        ],
        "x": 254,
        "y": 339
    },
    {
        "id": "5fa9c0075cec33a8",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "d1f7dbb67c317e36"
        ],
        "x": 57,
        "y": 44
    },
    {
        "id": "1ed65ce2c7bacaa8",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "333bc95a68907a66"
        ],
        "x": 777,
        "y": 144
    },
    {
        "id": "3d343da97c401351",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "98d74eadd776f6c4"
        ],
        "x": 757,
        "y": 456.5
    },
    {
        "id": "5e67e38fdcb931c5",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#487895",
            "label": true
        },
        "nodes": [
            "cfba724abbf34038"
        ],
        "x": 277,
        "y": 464
    },
    {
        "id": "3e01cf7c6b42164e",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#000000"
        },
        "nodes": [
            "2ac586e466ba8ab8"
        ],
        "x": 1037,
        "y": 524
    },
    {
        "id": "d35b94b9c9b60af6",
        "type": "group",
        "z": "f15328c23f2596ab",
        "name": "",
        "style": {
            "stroke": "#000000",
            "label": true,
            "fill": "#487895",
            "color": "#ffffff"
        },
        "nodes": [
            "c57fb9997d728dc6"
        ],
        "x": 257,
        "y": 344
    },
    {
        "id": "5b6c9e070d26d39c",
        "type": "group",
        "z": "366ee1704c7abe9f",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "59e9a29853707de3"
        ],
        "x": 54,
        "y": 39
    },
    {
        "id": "2879b2779d8f67a2",
        "type": "group",
        "z": "366ee1704c7abe9f",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "5cc80f33f8de1a71"
        ],
        "x": 774,
        "y": 139
    },
    {
        "id": "82cda89bad040927",
        "type": "group",
        "z": "366ee1704c7abe9f",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "3e8b0510063901ce"
        ],
        "x": 754,
        "y": 451.5
    },
    {
        "id": "9010093235c17c61",
        "type": "group",
        "z": "366ee1704c7abe9f",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#487895",
            "label": true
        },
        "nodes": [
            "7e7ef2406df14623"
        ],
        "x": 274,
        "y": 459
    },
    {
        "id": "4a1297c9e7749ced",
        "type": "group",
        "z": "366ee1704c7abe9f",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#000000"
        },
        "nodes": [
            "0cead15f5e3ca728"
        ],
        "x": 1034,
        "y": 519
    },
    {
        "id": "bf417de70a5b1611",
        "type": "group",
        "z": "7d1a76edaab21298",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "670335bae8ab73c2"
        ],
        "x": 54,
        "y": 39,
        "w": 232,
        "h": 82
    },
    {
        "id": "2cd8901884380dc8",
        "type": "group",
        "z": "b3a029ced1268723",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "06333b8523546246"
        ],
        "x": 54,
        "y": 39
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "9cd5ff5e.caf86",
        "type": "mongodb3",
        "uri": "$(MONGODBIP)",
        "name": "blinky-lite",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "a5bd4c3bb16034db",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Prepare DB Query",
        "func": "flow.set(\"trayType\", msg.payload.trayType);\nflow.set(\"mqttReadBufferSize\", msg.payload.mqttReadBufferSize);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "2ca2090ca4fae13a"
            ]
        ]
    },
    {
        "id": "2ca2090ca4fae13a",
        "type": "mongodb3 in",
        "z": "e1a1e83b4bc1e188",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "ec8658b58562541a"
            ]
        ]
    },
    {
        "id": "ec8658b58562541a",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "0f5c6efc42e17a0d"
            ]
        ]
    },
    {
        "id": "0f5c6efc42e17a0d",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "b9493939949ef45c",
            "ebd0aaa777084f31"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "046c5bcb558de507",
        "type": "json",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "8c36ac9f6e31416a"
            ]
        ]
    },
    {
        "id": "8c36ac9f6e31416a",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "d2a10c0f36da40da"
            ]
        ]
    },
    {
        "id": "fc77b3513df59260",
        "type": "mqtt in",
        "z": "e1a1e83b4bc1e188",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "046c5bcb558de507"
            ]
        ]
    },
    {
        "id": "39f4c67dce54e3c7",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "fc77b3513df59260"
            ]
        ]
    },
    {
        "id": "b9493939949ef45c",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Box Subscribe Setup in",
        "links": [
            "0f5c6efc42e17a0d"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "39f4c67dce54e3c7"
            ]
        ]
    },
    {
        "id": "771efce08087e3d2",
        "type": "mqtt out",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "d2a10c0f36da40da",
        "type": "switch",
        "z": "e1a1e83b4bc1e188",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "c3b1f5e107f72224"
            ],
            [
                "e0e962979df0a0f9"
            ],
            [
                "0ff3c17b319ca2aa"
            ]
        ]
    },
    {
        "id": "a50b6ac97ee87909",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "d35408de3bf5bbcf"
            ]
        ]
    },
    {
        "id": "c4fc43f290dced9d",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "0b241a6fd179f35d",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "1299d0c9d0492110",
            "eb2cec37e2649a83",
            "712ac1d459489d33"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "55f37a07a602d06d"
            ]
        ]
    },
    {
        "id": "1299d0c9d0492110",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "eb2cec37e2649a83",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d",
            "04a12df7293d9c10"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "71c3eecb13487ebd",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "82bf1a6381790e53"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "82bf1a6381790e53",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "deviceMQTT publish",
        "links": [
            "71c3eecb13487ebd",
            "aa428318895690ee"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "771efce08087e3d2"
            ]
        ]
    },
    {
        "id": "0ff3c17b319ca2aa",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "0b241a6fd179f35d"
            ]
        ]
    },
    {
        "id": "0b241a6fd179f35d",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Continue Devie Readings out",
        "links": [
            "c4fc43f290dced9d",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "9bd935f7e2e7deb1",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "2a83046c9259bbec"
            ]
        ]
    },
    {
        "id": "04a12df7293d9c10",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Archive Tray In",
        "links": [
            "eb2cec37e2649a83",
            "c378bea488900291"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "ef0171225df00690"
            ]
        ]
    },
    {
        "id": "2a83046c9259bbec",
        "type": "delay",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "d35408de3bf5bbcf"
            ]
        ]
    },
    {
        "id": "55f37a07a602d06d",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "a50b6ac97ee87909"
            ]
        ]
    },
    {
        "id": "ef0171225df00690",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "9bd935f7e2e7deb1"
            ]
        ]
    },
    {
        "id": "d35408de3bf5bbcf",
        "type": "mqtt out",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "e0e962979df0a0f9",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "1299d0c9d0492110"
            ]
        ]
    },
    {
        "id": "895c258a119670fd",
        "type": "mqtt in",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "7ff1e43e3c9dd7c7"
            ]
        ]
    },
    {
        "id": "712ac1d459489d33",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "ebd0aaa777084f31",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Device Subscribe Setup in",
        "links": [
            "0f5c6efc42e17a0d"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "3014cf066d0a918e"
            ]
        ]
    },
    {
        "id": "c378bea488900291",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "04a12df7293d9c10"
        ],
        "x": 1015,
        "y": 500,
        "wires": []
    },
    {
        "id": "d1b4e4f77e6221a3",
        "type": "inject",
        "z": "e1a1e83b4bc1e188",
        "g": "cbfba956c59a29f1",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"blinky-picoW-demo\",\"mqttReadBufferSize\":10}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "a5bd4c3bb16034db"
            ]
        ]
    },
    {
        "id": "c3b1f5e107f72224",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "e6eae5c8a21d720d",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\n// End Custom\nlet blinkyBusMessage = false;\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nswitch(msg.payload.cube)\n{\n    case 'led1':\n        blinkyBusSettingMsg.payload.address = 3;\n        blinkyBusMessage = true;\n        break;\n    case 'led2':\n        blinkyBusSettingMsg.payload.address = 4;\n        blinkyBusMessage = true;\n        break;\n    case 'nonblinkyBusSetting':\n        tray.nonblinkyBusSetting.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    let bufsize = 4;\n    let buffer = new ArrayBuffer(bufsize);\n    let settingsView = new DataView(buffer);\n    settingsView.setUint8(0, 1); //setting\n    settingsView.setUint8(1, blinkyBusSettingMsg.payload.address); //address\n    settingsView.setInt16(2, blinkyBusSettingMsg.payload.value, true); //value\n    let mqttMsg = {topic:blinkyBusSettingMsg.topic, payload:Buffer.from(buffer)};\n    msgArray = [mqttMsg, {topic:'settingDone', payload:tray}];\n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "71c3eecb13487ebd"
            ],
            [
                "eb2cec37e2649a83"
            ]
        ]
    },
    {
        "id": "7ff1e43e3c9dd7c7",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "ef5cb8e350f51d8c",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[0].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[1];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n\nlet serialBufSize = flow.get('mqttReadBufferSize');\nlet dataView     = new DataView(new ArrayBuffer(2));\nlet dataBuffer = [];\nfor (let ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nif (dataBuffer[0] == 1)\n{\n    let initDeviceMsg = {topic:\"initDevice\",payload:tray};\n    return [null, null, initDeviceMsg];\n}\n\n// Start Custom \ntray.watchdog.value  = dataBuffer[1];\ntray.chipTemp.value  = dataBuffer[2] / 100;\ntray.led1.value      = dataBuffer[3];\ntray.led2.value      = dataBuffer[4];\nnewData = true;\n// End custom\n\nif (!newData) return null;\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "712ac1d459489d33"
            ],
            [
                "c378bea488900291"
            ],
            [
                "5e7d2de841bcb0c1"
            ]
        ]
    },
    {
        "id": "3014cf066d0a918e",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = flow.get(\"trayType\") + \"/+/reading\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "895c258a119670fd"
            ]
        ]
    },
    {
        "id": "930b94f38479787c",
        "type": "split",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "8353cc62765ebd6d"
            ]
        ]
    },
    {
        "id": "aa428318895690ee",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "82bf1a6381790e53"
        ],
        "x": 1755,
        "y": 560,
        "wires": []
    },
    {
        "id": "5e7d2de841bcb0c1",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "40e56362c23599cc",
        "name": "Init Gizmo",
        "func": "var tray = msg.payload;\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nmsgs[1] = {\"address\":3,\"value\":tray.led1.value};\nmsgs[2] = {\"address\":4,\"value\":tray.led2.value};\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\nreturn {topic : publishTopic, payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "930b94f38479787c"
            ]
        ]
    },
    {
        "id": "8353cc62765ebd6d",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer),rate:500};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            [
                "aa428318895690ee"
            ]
        ]
    },
    {
        "id": "5d93334c.7b160c",
        "type": "inject",
        "z": "e1a1e83b4bc1e188",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "e06b15ee.c3bf78"
            ]
        ]
    },
    {
        "id": "e06b15ee.c3bf78",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 660,
        "wires": []
    },
    {
        "id": "e883641dd57f5725",
        "type": "mqtt in",
        "z": "46e7f7a7d011ce91",
        "name": "Device MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 530,
        "y": 360,
        "wires": [
            [
                "9d2131c095bf8a75"
            ]
        ]
    },
    {
        "id": "9d2131c095bf8a75",
        "type": "json",
        "z": "46e7f7a7d011ce91",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "352395cfbb5c4259"
            ]
        ]
    },
    {
        "id": "dba1706a219f10f7",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Make Razor Tray",
        "func": "let tray = \n{\n  \"type\": \"Razor\",\n  \"name\": \"01\",\n  \"arcPeriod\": 60000,\n  \"timeStamp\": 1649435680293,\n  \"Event\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": -1,\n        \"low\": 0,\n        \"high\": 3,\n        \"hihi\": 3\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"Amount\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"g\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 10,\n        \"low\": 20,\n        \"high\": 1000,\n        \"hihi\": 2000\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"Concentration\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"%\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 1,\n        \"low\": 1,\n        \"high\": 50,\n        \"hihi\": 50\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"RedTarget\": {\n    \"action\": \"setting\",\n    \"type\": \"scalar\",\n    \"value\": 5,\n    \"unit\": \"%\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 1,\n        \"low\": 1,\n        \"high\": 50,\n        \"hihi\": 50\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"BlueTarget\": {\n    \"action\": \"setting\",\n    \"type\": \"scalar\",\n    \"value\": 2.5,\n    \"unit\": \"%\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 1,\n        \"low\": 1,\n        \"high\": 50,\n        \"hihi\": 50\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"FalseTriggers\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 0,\n        \"low\": 0,\n        \"high\": 1000,\n        \"hihi\": 2000\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"RedTotal\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"g\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 0,\n        \"low\": 0,\n        \"high\": 50000,\n        \"hihi\": 60000\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  },\n  \"BlueTotal\": {\n    \"action\": \"reading\",\n    \"type\": \"scalar\",\n    \"value\": 0,\n    \"unit\": \"g\",\n    \"alarm\": {\n      \"value\": 0,\n      \"limits\": {\n        \"lolo\": 0,\n        \"low\": 0,\n        \"high\": 50000,\n        \"hihi\": 60000\n      },\n      \"notify\": {\n        \"name\": \"\",\n        \"number\": \"\",\n        \"time\": 0\n      }\n    }\n  }\n}\nreturn {topic: \"Razor\",payload:[{type:\"Razor\"},tray]};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6ff57b96a0c66098",
        "type": "inject",
        "z": "46e7f7a7d011ce91",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 80,
        "wires": [
            [
                "dba1706a219f10f7"
            ]
        ]
    },
    {
        "id": "95631d6287bed049",
        "type": "mqtt out",
        "z": "46e7f7a7d011ce91",
        "name": "Device MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1280,
        "y": 180,
        "wires": []
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "46e7f7a7d011ce91",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "46e7f7a7d011ce91",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 260,
        "wires": [
            [
                "fcc98447c16c3949"
            ],
            [
                "91cded1b31446957"
            ],
            [
                "47de6287cc26419f"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Filter MQTT",
        "func": "let tray = flow.get('tray');\nlet mqttTopic = msg.topic.split('/')\nif (mqttTopic[1] != tray.type) return null;\nif (mqttTopic[2] != tray.name)    return null;\nreturn {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "f75b9887786b11c4",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Publish tray",
        "func": "var tray = flow.get('tray');\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 240,
        "wires": [
            [
                "710d1b5d29b91d4a"
            ]
        ]
    },
    {
        "id": "45a97566b65c65cc",
        "type": "link in",
        "z": "46e7f7a7d011ce91",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "91cded1b31446957",
            "a66ef2e5b482662a",
            "df03212a7e41deb1",
            "f0c1e263384a520f",
            "f5d0568e288098ed",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "93758a55568a2f76",
            "1e34df4b19ff22cc"
        ],
        "x": 1155,
        "y": 240,
        "wires": [
            [
                "af6b8786c8e67fa7"
            ]
        ]
    },
    {
        "id": "91cded1b31446957",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "Ping Out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 955,
        "y": 260,
        "wires": []
    },
    {
        "id": "1e34df4b19ff22cc",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "45a97566b65c65cc"
        ],
        "x": 955,
        "y": 220,
        "wires": []
    },
    {
        "id": "93758a55568a2f76",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "2e57bb9f5ac33f8f",
            "45a97566b65c65cc"
        ],
        "x": 955,
        "y": 180,
        "wires": []
    },
    {
        "id": "fcc98447c16c3949",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Create Setting",
        "func": "var tray = flow.get('tray');\nlet publishTopic = \"Ockhams\" + \"/\" + tray.type + \"/\" + tray.name + \"/setting\";\n\nvar blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : {} \n}\nvar blinkyBusMessage = false;\nswitch(msg.payload.cube)\n{\n    case 'RedTarget':\n        blinkyBusSettingMsg.payload = {[msg.payload.cube]:msg.payload.value};\n//        tray[msg.payload.cube].value = msg.payload.value;\n        blinkyBusMessage = true;\n        break;\n    case 'BlueTarget':\n        blinkyBusSettingMsg.payload = {[msg.payload.cube]:msg.payload.value};\n//        tray[msg.payload.cube].value = msg.payload.value;\n        blinkyBusMessage = true;\n        break;\n    case 'nonblinkyBusSetting':\n        tray[msg.payload.cube].value = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nvar msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    msgArray = [blinkyBusSettingMsg, null];\n    \n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:true}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 200,
        "wires": [
            [
                "93758a55568a2f76"
            ],
            [
                "1e34df4b19ff22cc"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar trayProps = {\n    box         :   mqttSplit[0],\n    type        :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nreturn {topic: trayProps.type,payload:[{'$and':[ {type:trayProps.type}, {name:trayProps.name}] }]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "1715231c7d06c5f3"
            ]
        ]
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "46e7f7a7d011ce91",
        "name": "read Tray",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "readTraydesc",
        "payload": "blinky-lite-v4/Razor/01/setting/#",
        "payloadType": "str",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "1715231c7d06c5f3",
        "type": "mongodb3 in",
        "z": "46e7f7a7d011ce91",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "",
        "collection": "trays",
        "operation": "findOne",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Save tray config in Memory",
        "func": "delete msg.payload[\"_id\"];\nflow.set('settingInProgress', false);\nflow.set('tray', msg.payload);\nflow.set('deviceInit', 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 80,
        "wires": [
            [
                "c7cf915fea1718c2"
            ]
        ]
    },
    {
        "id": "2e57bb9f5ac33f8f",
        "type": "link in",
        "z": "46e7f7a7d011ce91",
        "name": "deviceMQTT publish",
        "links": [
            "93758a55568a2f76"
        ],
        "x": 1155,
        "y": 180,
        "wires": [
            [
                "95631d6287bed049"
            ]
        ]
    },
    {
        "id": "47de6287cc26419f",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 300,
        "wires": [
            [
                "df03212a7e41deb1"
            ]
        ]
    },
    {
        "id": "df03212a7e41deb1",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "Continue Devie Readings out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 955,
        "y": 300,
        "wires": []
    },
    {
        "id": "47610e911668e3dd",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Set MQTT Reading topic",
        "func": "let tray = flow.get(\"tray\");\nlet subscribeTopic = \"Ockhams\" + \"/\" + tray.type + \"/\" + tray.name + \"/reading\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "e883641dd57f5725"
            ]
        ]
    },
    {
        "id": "f5d0568e288098ed",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d",
            "314901ad241bc129"
        ],
        "x": 955,
        "y": 360,
        "wires": []
    },
    {
        "id": "352395cfbb5c4259",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Create Readings",
        "func": "var tray = flow.get('tray');\nvar newData = true;\ntray.timeStamp = msg.payload.UnixTime * 1000;\ntray.Event.value = msg.payload.Event;\ntray.Amount.value = Math.round(10 * msg.payload.Amount) / 10;\ntray.Concentration.value = Math.round(100 * msg.payload.Concentration) / 100;\ntray.FalseTriggers.value = msg.payload.FalseTriggers;\ntray.RedTotal.value = Math.round(msg.payload.RedTotal);\ntray.BlueTotal.value = Math.round(msg.payload.BlueTotal);\ntray.RedTarget.value = Math.round(10 * msg.payload.RedTargetPPT ) / 100;\ntray.BlueTarget.value = Math.round(10 * msg.payload.BlueTargetPPT ) / 100;\n\nif (!newData) return null;\nreturn  {topic:msg.topic, payload:newData}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 360,
        "wires": [
            [
                "f5d0568e288098ed"
            ]
        ]
    },
    {
        "id": "844819ea9a72f464",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Archive tray",
        "func": "var tray = flow.get('tray');\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "139b31d2e3923036"
            ]
        ]
    },
    {
        "id": "314901ad241bc129",
        "type": "link in",
        "z": "46e7f7a7d011ce91",
        "name": "Archive Tray In",
        "links": [
            "f5d0568e288098ed"
        ],
        "x": 1155,
        "y": 300,
        "wires": [
            [
                "569728fde7e501b1"
            ]
        ]
    },
    {
        "id": "139b31d2e3923036",
        "type": "delay",
        "z": "46e7f7a7d011ce91",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 300,
        "wires": [
            [
                "710d1b5d29b91d4a"
            ]
        ]
    },
    {
        "id": "af6b8786c8e67fa7",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Readings Alarm Scan",
        "func": "var tray = flow.get('tray');\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'newData', payload: true};\n\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "f75b9887786b11c4"
            ]
        ]
    },
    {
        "id": "569728fde7e501b1",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Readings Alarm Scan",
        "func": "var tray = flow.get('tray');\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'newData', payload: true};\n\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "844819ea9a72f464"
            ]
        ]
    },
    {
        "id": "641115318317ed18",
        "type": "mqtt in",
        "z": "46e7f7a7d011ce91",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "710d1b5d29b91d4a",
        "type": "mqtt out",
        "z": "46e7f7a7d011ce91",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1850,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7cf915fea1718c2",
        "type": "link out",
        "z": "46e7f7a7d011ce91",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "a0b8f4814cfecb64",
            "c9d57cfc8ff93295"
        ],
        "x": 955,
        "y": 80,
        "wires": []
    },
    {
        "id": "b59b1d6cff97cbcb",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Set MQTT Setting topic",
        "func": "let trayProps = flow.get('trayProps');\nlet subscribeTopic = trayProps.box + \"/\" + trayProps.type + \"/\" + trayProps.name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "641115318317ed18"
            ]
        ]
    },
    {
        "id": "a0b8f4814cfecb64",
        "type": "link in",
        "z": "46e7f7a7d011ce91",
        "name": "Box Subscribe Setup in",
        "links": [
            "c7cf915fea1718c2"
        ],
        "x": 55,
        "y": 200,
        "wires": [
            [
                "b59b1d6cff97cbcb"
            ]
        ]
    },
    {
        "id": "c9d57cfc8ff93295",
        "type": "link in",
        "z": "46e7f7a7d011ce91",
        "name": "Device Subscribe Setup in",
        "links": [
            "c7cf915fea1718c2"
        ],
        "x": 65,
        "y": 360,
        "wires": [
            [
                "47610e911668e3dd"
            ]
        ]
    },
    {
        "id": "e35c19dba918d86a",
        "type": "inject",
        "z": "46e7f7a7d011ce91",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "d298d01345424f89"
            ]
        ]
    },
    {
        "id": "d298d01345424f89",
        "type": "function",
        "z": "46e7f7a7d011ce91",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 480,
        "wires": []
    },
    {
        "id": "1634d9e859e8e241",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Prepare DB Query",
        "func": "flow.set(msg.topic, msg.payload);\nreturn {topic: msg.payload,payload:[{type:msg.payload}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "369e8cfbbe0a05b2"
            ]
        ]
    },
    {
        "id": "a2d4d8d23e0fb663",
        "type": "inject",
        "z": "f02e2abde5efb55b",
        "g": "43847f8fb3ca821a",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "trayType",
        "payload": "shellyplug-s",
        "payloadType": "str",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "1634d9e859e8e241"
            ]
        ]
    },
    {
        "id": "369e8cfbbe0a05b2",
        "type": "mongodb3 in",
        "z": "f02e2abde5efb55b",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "b381f5caa76ed41c"
            ]
        ]
    },
    {
        "id": "b381f5caa76ed41c",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "74eafad46fc6417b"
            ]
        ]
    },
    {
        "id": "74eafad46fc6417b",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "6e4b4407169e1086",
            "09ce4415c78cb060"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "559ee4e80470976f",
        "type": "json",
        "z": "f02e2abde5efb55b",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "25f656d993970175"
            ]
        ]
    },
    {
        "id": "25f656d993970175",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "01200444823e9744"
            ]
        ]
    },
    {
        "id": "198d1470cc58f150",
        "type": "mqtt in",
        "z": "f02e2abde5efb55b",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "559ee4e80470976f"
            ]
        ]
    },
    {
        "id": "1a8427b57076b11a",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "198d1470cc58f150"
            ]
        ]
    },
    {
        "id": "6e4b4407169e1086",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "Box Subscribe Setup in",
        "links": [
            "74eafad46fc6417b"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "1a8427b57076b11a"
            ]
        ]
    },
    {
        "id": "bd30d02dec1a393e",
        "type": "mqtt out",
        "z": "f02e2abde5efb55b",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "01200444823e9744",
        "type": "switch",
        "z": "f02e2abde5efb55b",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "21dc7d3495acccbd"
            ],
            [
                "89726fbb803ea3bd"
            ],
            [
                "d60e3c13d0256ccd"
            ]
        ]
    },
    {
        "id": "d6c80579e2ba5745",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "8cdbcd5e5e53f518"
            ]
        ]
    },
    {
        "id": "1a24e55cd9f5fad8",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "0b615fc4eab214f5",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "8b577cf4bf685b69",
            "53d53f17b5bf0bb7",
            "272a21cb94e74d12"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "6615f57f6053e1db"
            ]
        ]
    },
    {
        "id": "8b577cf4bf685b69",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "1a24e55cd9f5fad8"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "53d53f17b5bf0bb7",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "1a24e55cd9f5fad8",
            "a097d8abd8f1b4d0"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "e50f6d680de3402a",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "1b1cdee17104476b"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "21dc7d3495acccbd",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "g": "2e36a704e5b34131",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = \"shellies\" + \"/\" + tray.type + \"-\" + tray.name + \"/relay/0/command\";\n// End Custom\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : {} \n}\nlet blinkyBusMessage = false;\nswitch(msg.payload.cube)\n{\n// Start Custom\n    case 'setRelay':\n        if (msg.payload.value == 0)  blinkyBusSettingMsg.payload = \"off\"\n        if (msg.payload.value == 1)  blinkyBusSettingMsg.payload = \"on\"\n        tray[msg.payload.cube].value = msg.payload.value;\n        blinkyBusMessage = true;\n        break;\n    case 'opState':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n   case 'startScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'maxRate':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'alias':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'priceArea':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'timeZone':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n     default:\n        break;\n// End Custom\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    msgArray = [blinkyBusSettingMsg, {topic:'settingDone', payload:tray}];\n    \n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "e50f6d680de3402a"
            ],
            [
                "53d53f17b5bf0bb7"
            ]
        ]
    },
    {
        "id": "1b1cdee17104476b",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "deviceMQTT publish",
        "links": [
            "e50f6d680de3402a"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "bd30d02dec1a393e"
            ]
        ]
    },
    {
        "id": "d60e3c13d0256ccd",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "0b615fc4eab214f5"
            ]
        ]
    },
    {
        "id": "0b615fc4eab214f5",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "Continue Devie Readings out",
        "links": [
            "1a24e55cd9f5fad8",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "4e216083ac2f061b",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "54ccde02ed0feae7"
            ]
        ]
    },
    {
        "id": "a097d8abd8f1b4d0",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "Archive Tray In",
        "links": [
            "53d53f17b5bf0bb7",
            "e747310c9e11a3f5"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "44cc0743cdfbeaac"
            ]
        ]
    },
    {
        "id": "54ccde02ed0feae7",
        "type": "delay",
        "z": "f02e2abde5efb55b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "8cdbcd5e5e53f518"
            ]
        ]
    },
    {
        "id": "6615f57f6053e1db",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "d6c80579e2ba5745"
            ]
        ]
    },
    {
        "id": "44cc0743cdfbeaac",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "4e216083ac2f061b"
            ]
        ]
    },
    {
        "id": "8cdbcd5e5e53f518",
        "type": "mqtt out",
        "z": "f02e2abde5efb55b",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "89726fbb803ea3bd",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "8b577cf4bf685b69"
            ]
        ]
    },
    {
        "id": "20ca6b3cd885565b",
        "type": "mqtt in",
        "z": "f02e2abde5efb55b",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "a2d983d5ac16f767"
            ]
        ]
    },
    {
        "id": "dcc23eb60bfbcc66",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "g": "932976b1fa8413e3",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"shellies\" + \"/+/#\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "20ca6b3cd885565b"
            ]
        ]
    },
    {
        "id": "272a21cb94e74d12",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "1a24e55cd9f5fad8"
        ],
        "x": 1015,
        "y": 480,
        "wires": []
    },
    {
        "id": "a2d983d5ac16f767",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "g": "6b1d72a065437914",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[1].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[1].substring(trayType.length + 1, topicSplit[1].length);\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n// Start Custom \nif (topicSplit[2] == 'temperature')     tray.temperature.value     = Number(msg.payload);\nif (topicSplit[2] == 'overtemperature') tray.overtemperature.value = Number(msg.payload);\nif (topicSplit[2] == 'relay')\n{\n    if (topicSplit.length < 5)\n    {\n        if (msg.payload == \"off\") tray.relay.value = 0;\n        if (msg.payload == \"on\")  tray.relay.value = 1;\n        newData = true;\n    }\n    else\n    {\n        if (topicSplit[4] == 'power')  tray.power.value  = Number(msg.payload);\n        if (topicSplit[4] == 'energy') tray.energy.value = Math.round(10 * Number(msg.payload) / 60) / 10;\n    }\n}\nif (!newData) return null;\n// End custom\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "272a21cb94e74d12"
            ],
            [
                "e747310c9e11a3f5"
            ]
        ]
    },
    {
        "id": "09ce4415c78cb060",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "Device Subscribe Setup in",
        "links": [
            "74eafad46fc6417b"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "dcc23eb60bfbcc66"
            ]
        ]
    },
    {
        "id": "e747310c9e11a3f5",
        "type": "link out",
        "z": "f02e2abde5efb55b",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "a097d8abd8f1b4d0"
        ],
        "x": 1015,
        "y": 520,
        "wires": []
    },
    {
        "id": "a24a06c77a88af1c",
        "type": "inject",
        "z": "f02e2abde5efb55b",
        "name": "Every 10 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "6dae18247871f69e"
            ]
        ]
    },
    {
        "id": "6dae18247871f69e",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "g": "6be74e15039dce40",
        "name": "SpotPrice and Schedule",
        "func": "let trays = flow.get('trays');\nif (trays == undefined) return null;\nlet now = new Date();\n\nlet settingArray = [];\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n// Start custom\n    if (trays[ii].opState.value == 1)\n    {\n        let setRelay = 0;\n        let hours = convertTZ(now, trays[ii].timeZone.value).getHours();\n        if (trays[ii].startScheduleTime.value > trays[ii].stopScheduleTime.value)\n        {\n            if (trays[ii].startScheduleTime.value <= hours) setRelay = 1;\n            if (hours < trays[ii].stopScheduleTime.value )  setRelay = 1;\n        }\n        else\n        {\n            if ((trays[ii].startScheduleTime.value <= hours) && (hours < trays[ii].stopScheduleTime.value) ) setRelay = 1;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n    if (trays[ii].opState.value == 2)\n    {\n        let setRelay = 0;\n        if (trays[ii].maxRate.value >= flow.get('spotPrice')[trays[ii].priceArea.value])\n        {\n            setRelay = 1;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n// End  custom\n}\nif (settingArray.length < 1) return null;\nreturn {topic:'settingArray', payload:settingArray};\n\n//Got this from:https://stackoverflow.com/questions/10087819/convert-date-to-another-timezone-in-javascript\nfunction convertTZ(date, tzString) \n{\n    return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: tzString}));   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "d60dc2dab7fad64e"
            ]
        ]
    },
    {
        "id": "d60dc2dab7fad64e",
        "type": "split",
        "z": "f02e2abde5efb55b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "7c60e75462fe7f46"
            ]
        ]
    },
    {
        "id": "7c60e75462fe7f46",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Shift up",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "25f656d993970175"
            ]
        ]
    },
    {
        "id": "3053b7ae18c728da",
        "type": "inject",
        "z": "f02e2abde5efb55b",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "5743509bfd22b9bd"
            ]
        ]
    },
    {
        "id": "5743509bfd22b9bd",
        "type": "function",
        "z": "f02e2abde5efb55b",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": []
    },
    {
        "id": "04e465623783d52c",
        "type": "link in",
        "z": "f02e2abde5efb55b",
        "name": "Spot Price In",
        "links": [
            "a22129cb393da53e"
        ],
        "x": 125,
        "y": 700,
        "wires": [
            [
                "5743509bfd22b9bd"
            ]
        ]
    },
    {
        "id": "72c23b51e80a4094",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Prepare DB Query",
        "func": "flow.set(msg.topic, msg.payload);\nreturn {topic: msg.payload,payload:[{type:msg.payload}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "e947e3cd2fe8c217"
            ]
        ]
    },
    {
        "id": "e947e3cd2fe8c217",
        "type": "mongodb3 in",
        "z": "a41147412bb7ddc4",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "79eada808d9d959c"
            ]
        ]
    },
    {
        "id": "79eada808d9d959c",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "b1529d8e02cb5543"
            ]
        ]
    },
    {
        "id": "b1529d8e02cb5543",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "adee19a31728e85a",
            "378f979c4fea083a"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "1fa388a49d827aec",
        "type": "json",
        "z": "a41147412bb7ddc4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "49f2448aaec05d82"
            ]
        ]
    },
    {
        "id": "49f2448aaec05d82",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "d23da6158078616e"
            ]
        ]
    },
    {
        "id": "4694b659c6132344",
        "type": "mqtt in",
        "z": "a41147412bb7ddc4",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "1fa388a49d827aec"
            ]
        ]
    },
    {
        "id": "6ec07525da517941",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "4694b659c6132344"
            ]
        ]
    },
    {
        "id": "adee19a31728e85a",
        "type": "link in",
        "z": "a41147412bb7ddc4",
        "name": "Box Subscribe Setup in",
        "links": [
            "b1529d8e02cb5543"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "6ec07525da517941"
            ]
        ]
    },
    {
        "id": "db6b4a76e4e24e6c",
        "type": "mqtt out",
        "z": "a41147412bb7ddc4",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "d23da6158078616e",
        "type": "switch",
        "z": "a41147412bb7ddc4",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "2b964c7c5cf612ad"
            ],
            [
                "5133582d276ef5ec"
            ],
            [
                "298c98edff4d60e6"
            ]
        ]
    },
    {
        "id": "f9d9196772af0dcb",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "eeb70a8ef7391425"
            ]
        ]
    },
    {
        "id": "328110d30e5318e0",
        "type": "link in",
        "z": "a41147412bb7ddc4",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "2024f0a7dc09ae92",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "3bc0e155fb39b4c7",
            "e5703f28bf73f080",
            "40c7950d4663e572"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "600f83fb17d1d2ca"
            ]
        ]
    },
    {
        "id": "3bc0e155fb39b4c7",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "328110d30e5318e0"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "e5703f28bf73f080",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "328110d30e5318e0",
            "3ab53aa3b266c748"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "bdc4b1222fb085c6",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "54886e2cd0864961"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "54886e2cd0864961",
        "type": "link in",
        "z": "a41147412bb7ddc4",
        "name": "deviceMQTT publish",
        "links": [
            "bdc4b1222fb085c6"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "db6b4a76e4e24e6c"
            ]
        ]
    },
    {
        "id": "298c98edff4d60e6",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "2024f0a7dc09ae92"
            ]
        ]
    },
    {
        "id": "2024f0a7dc09ae92",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "Continue Devie Readings out",
        "links": [
            "328110d30e5318e0",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "1b9eb972e6e4286a",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "946d4e0738c8dc06"
            ]
        ]
    },
    {
        "id": "3ab53aa3b266c748",
        "type": "link in",
        "z": "a41147412bb7ddc4",
        "name": "Archive Tray In",
        "links": [
            "e5703f28bf73f080",
            "bb91152c588ce607"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "7cf926f9f1713250"
            ]
        ]
    },
    {
        "id": "946d4e0738c8dc06",
        "type": "delay",
        "z": "a41147412bb7ddc4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "eeb70a8ef7391425"
            ]
        ]
    },
    {
        "id": "600f83fb17d1d2ca",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "f9d9196772af0dcb"
            ]
        ]
    },
    {
        "id": "7cf926f9f1713250",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "1b9eb972e6e4286a"
            ]
        ]
    },
    {
        "id": "eeb70a8ef7391425",
        "type": "mqtt out",
        "z": "a41147412bb7ddc4",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "5133582d276ef5ec",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "3bc0e155fb39b4c7"
            ]
        ]
    },
    {
        "id": "7f34b90253cb8570",
        "type": "mqtt in",
        "z": "a41147412bb7ddc4",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "34f399d7fd0bece7"
            ]
        ]
    },
    {
        "id": "40c7950d4663e572",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "328110d30e5318e0"
        ],
        "x": 1015,
        "y": 480,
        "wires": []
    },
    {
        "id": "378f979c4fea083a",
        "type": "link in",
        "z": "a41147412bb7ddc4",
        "name": "Device Subscribe Setup in",
        "links": [
            "b1529d8e02cb5543"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "c8d372a8aa11586a"
            ]
        ]
    },
    {
        "id": "bb91152c588ce607",
        "type": "link out",
        "z": "a41147412bb7ddc4",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "3ab53aa3b266c748"
        ],
        "x": 1015,
        "y": 520,
        "wires": []
    },
    {
        "id": "baaf6272d04085cc",
        "type": "inject",
        "z": "a41147412bb7ddc4",
        "g": "b6c18360e72ab474",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "trayType",
        "payload": "shellyht",
        "payloadType": "str",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "72c23b51e80a4094"
            ]
        ]
    },
    {
        "id": "2b964c7c5cf612ad",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "g": "52624d73fbc9df62",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = \"shellies\" + \"/\" + tray.type + \"-\" + tray.name + \"/relay/0/command\";\n// End Custom\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : {} \n}\nlet blinkyBusMessage = false;\nswitch(msg.payload.cube)\n{\n// Start Custom\n    case 'alias':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n     default:\n        break;\n// End Custom\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    msgArray = [blinkyBusSettingMsg, {topic:'settingDone', payload:tray}];\n    \n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "bdc4b1222fb085c6"
            ],
            [
                "e5703f28bf73f080"
            ]
        ]
    },
    {
        "id": "34f399d7fd0bece7",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "g": "4d3ae7b8c44f12ab",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[1].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[2];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n// Start Custom \nif (topicSplit[4] == 'temperature')     tray.temperature.value = msg.payload;\nif (topicSplit[4] == 'humidity') tray.humidity.value = msg.payload;\nif (topicSplit[4] == 'battery') \n{\n    tray.battery.value = msg.payload;\n// last message in burst\n    newData = true;\n}\nif (!newData) return null;\n// End custom\n\nlet newMsg = {topic:trayName, payload:tray};\n/* archive all the time\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\n*/\nreturn  [newMsg,newMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "40c7950d4663e572"
            ],
            [
                "bb91152c588ce607"
            ]
        ]
    },
    {
        "id": "c8d372a8aa11586a",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "g": "c58cb8f355a3b5c9",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"shellies/shellyht/+/sensor/#\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "7f34b90253cb8570"
            ]
        ]
    },
    {
        "id": "f1b55e60246d78f2",
        "type": "inject",
        "z": "a41147412bb7ddc4",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "25b71008259167c8"
            ]
        ]
    },
    {
        "id": "25b71008259167c8",
        "type": "function",
        "z": "a41147412bb7ddc4",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": []
    },
    {
        "id": "0e1acd63f99aaf24",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Prepare DB Query",
        "func": "flow.set(\"trayType\", msg.payload.trayType);\nflow.set(\"mqttReadBufferSize\", msg.payload.mqttReadBufferSize);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "e0b7cd07da15e111"
            ]
        ]
    },
    {
        "id": "e0b7cd07da15e111",
        "type": "mongodb3 in",
        "z": "13a1f6b35420cd30",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "dfa9de974561ac99"
            ]
        ]
    },
    {
        "id": "dfa9de974561ac99",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "99c34d49e2b89a82"
            ]
        ]
    },
    {
        "id": "99c34d49e2b89a82",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "44efdcc20c64046e",
            "9587fe325587679f"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "40ea0fa1ff94d990",
        "type": "json",
        "z": "13a1f6b35420cd30",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "165f487dc2a4937f"
            ]
        ]
    },
    {
        "id": "165f487dc2a4937f",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "5cce0a10754511eb"
            ]
        ]
    },
    {
        "id": "2e3ccf78d44bc872",
        "type": "mqtt in",
        "z": "13a1f6b35420cd30",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "40ea0fa1ff94d990"
            ]
        ]
    },
    {
        "id": "e4f638989f679143",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "2e3ccf78d44bc872"
            ]
        ]
    },
    {
        "id": "44efdcc20c64046e",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "Box Subscribe Setup in",
        "links": [
            "99c34d49e2b89a82"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "e4f638989f679143"
            ]
        ]
    },
    {
        "id": "a31a85e932c1b29d",
        "type": "mqtt out",
        "z": "13a1f6b35420cd30",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "5cce0a10754511eb",
        "type": "switch",
        "z": "13a1f6b35420cd30",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "ba3d2d81576347eb"
            ],
            [
                "fd4624656019c610"
            ],
            [
                "0f4e8be93b989b33"
            ]
        ]
    },
    {
        "id": "1fabcba92eb0e2cd",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "40ef3ddc2402c5a2"
            ]
        ]
    },
    {
        "id": "963f37c5df108e68",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "7acd91dc01028315",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "0de38795b4c00c38",
            "91556c607fd2c7fa",
            "55dbd4d93f4c3844"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "e92ba11ee8d565fa"
            ]
        ]
    },
    {
        "id": "0de38795b4c00c38",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "963f37c5df108e68"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "91556c607fd2c7fa",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "963f37c5df108e68",
            "c77f622eb5498d6a"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "bdd8b2d44165d355",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "728fd073c48964c9"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "728fd073c48964c9",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "deviceMQTT publish",
        "links": [
            "bdd8b2d44165d355",
            "b1ab22511126d592"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "a31a85e932c1b29d"
            ]
        ]
    },
    {
        "id": "0f4e8be93b989b33",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "7acd91dc01028315"
            ]
        ]
    },
    {
        "id": "7acd91dc01028315",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "Continue Devie Readings out",
        "links": [
            "963f37c5df108e68",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "db5e7c82b07e926c",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "e740cfc2c908ced8"
            ]
        ]
    },
    {
        "id": "c77f622eb5498d6a",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "Archive Tray In",
        "links": [
            "91556c607fd2c7fa",
            "8b5be96b11932357"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "8228d53abf94bc1e"
            ]
        ]
    },
    {
        "id": "e740cfc2c908ced8",
        "type": "delay",
        "z": "13a1f6b35420cd30",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "40ef3ddc2402c5a2"
            ]
        ]
    },
    {
        "id": "e92ba11ee8d565fa",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "1fabcba92eb0e2cd"
            ]
        ]
    },
    {
        "id": "8228d53abf94bc1e",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "db5e7c82b07e926c"
            ]
        ]
    },
    {
        "id": "40ef3ddc2402c5a2",
        "type": "mqtt out",
        "z": "13a1f6b35420cd30",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "fd4624656019c610",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "0de38795b4c00c38"
            ]
        ]
    },
    {
        "id": "a68d674c845d9d95",
        "type": "mqtt in",
        "z": "13a1f6b35420cd30",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "5af8b7692afda891"
            ]
        ]
    },
    {
        "id": "55dbd4d93f4c3844",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "963f37c5df108e68"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "9587fe325587679f",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "Device Subscribe Setup in",
        "links": [
            "99c34d49e2b89a82"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "707fa096b24fe812"
            ]
        ]
    },
    {
        "id": "8b5be96b11932357",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "c77f622eb5498d6a"
        ],
        "x": 1015,
        "y": 500,
        "wires": []
    },
    {
        "id": "6257f723452ad4b5",
        "type": "split",
        "z": "13a1f6b35420cd30",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "8e08ac2c9be34cc8"
            ]
        ]
    },
    {
        "id": "b1ab22511126d592",
        "type": "link out",
        "z": "13a1f6b35420cd30",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "728fd073c48964c9"
        ],
        "x": 1755,
        "y": 560,
        "wires": []
    },
    {
        "id": "0ce768c205b11282",
        "type": "delay",
        "z": "13a1f6b35420cd30",
        "name": "Rate Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1660,
        "y": 560,
        "wires": [
            [
                "b1ab22511126d592"
            ]
        ]
    },
    {
        "id": "8e08ac2c9be34cc8",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer),rate:500};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            [
                "0ce768c205b11282"
            ]
        ]
    },
    {
        "id": "e02be85c6ad51169",
        "type": "inject",
        "z": "13a1f6b35420cd30",
        "g": "4c23b36220bee4a5",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"blinky-hpTempBypass\",\"mqttReadBufferSize\":6}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "0e1acd63f99aaf24"
            ]
        ]
    },
    {
        "id": "ba3d2d81576347eb",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "g": "89d000920b3da55b",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\n// End Custom\nlet blinkyBusMessage = false;\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nswitch(msg.payload.cube)\n{\n    case 'setRelay':\n        blinkyBusSettingMsg.payload.address = 2;\n        blinkyBusMessage = true;\n        break;\n    case 'opState':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n   case 'startScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'maxRate':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'alias':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'priceArea':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'timeZone':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    let bufsize = 4;\n    let buffer = new ArrayBuffer(bufsize);\n    let settingsView = new DataView(buffer);\n    settingsView.setUint8(0, 1); //setting\n    settingsView.setUint8(1, blinkyBusSettingMsg.payload.address); //address\n    settingsView.setInt16(2, blinkyBusSettingMsg.payload.value, true); //value\n    let mqttMsg = {topic:blinkyBusSettingMsg.topic, payload:Buffer.from(buffer)};\n    msgArray = [mqttMsg, {topic:'settingDone', payload:tray}];\n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "bdd8b2d44165d355"
            ],
            [
                "91556c607fd2c7fa"
            ]
        ]
    },
    {
        "id": "5af8b7692afda891",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "g": "9b262d7db85e79ca",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[0].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[1];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n\nlet serialBufSize = flow.get('mqttReadBufferSize');\nlet dataView     = new DataView(new ArrayBuffer(2));\nlet dataBuffer = [];\nfor (let ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nif (dataBuffer[0] == 1)\n{\n    let initDeviceMsg = {topic:\"initDevice\",payload:tray};\n    return [null, null, initDeviceMsg];\n}\n\n// Start Custom \ntray.watchdog.value  = dataBuffer[1];\ntray.setRelay.value  = dataBuffer[2];\nnewData = true;\n// End custom\n\nif (!newData) return null;\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "55dbd4d93f4c3844"
            ],
            [
                "8b5be96b11932357"
            ],
            [
                "bae68adcc47d0dbd"
            ]
        ]
    },
    {
        "id": "707fa096b24fe812",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "g": "cf376f876bd4e4ee",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"blinky-hpTempBypass\" + \"/+/reading\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "a68d674c845d9d95"
            ]
        ]
    },
    {
        "id": "bae68adcc47d0dbd",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "g": "52a1cbfb51e76281",
        "name": "Init Gizmo",
        "func": "var tray = msg.payload;\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nmsgs[1] = {\"address\":2,\"value\":tray.setRelay.value};\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\nreturn {topic : publishTopic, payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "6257f723452ad4b5"
            ]
        ]
    },
    {
        "id": "0db8494523f0170f",
        "type": "inject",
        "z": "13a1f6b35420cd30",
        "name": "Every 10 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "be896ff114dcd321"
            ]
        ]
    },
    {
        "id": "133c36a65ae85c5c",
        "type": "split",
        "z": "13a1f6b35420cd30",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "0401bd1c653860df"
            ]
        ]
    },
    {
        "id": "0401bd1c653860df",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Shift up",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            [
                "165f487dc2a4937f"
            ]
        ]
    },
    {
        "id": "be896ff114dcd321",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "g": "4c64c2d1f7c75276",
        "name": "SpotPrice and Schedule",
        "func": "let trays = flow.get('trays');\nif (trays == undefined) return null;\nlet now = new Date();\n\nlet settingArray = [];\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n// Start custom\n    if (trays[ii].opState.value == 1)\n    {\n        let setRelay = 0;\n        let hours = convertTZ(now, trays[ii].timeZone.value).getHours();\n        if (trays[ii].startScheduleTime.value > trays[ii].stopScheduleTime.value)\n        {\n            if (trays[ii].startScheduleTime.value <= hours) setRelay = 1;\n            if (hours < trays[ii].stopScheduleTime.value )  setRelay = 1;\n        }\n        else\n        {\n            if ((trays[ii].startScheduleTime.value <= hours) && (hours < trays[ii].stopScheduleTime.value) ) setRelay = 1;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n    if (trays[ii].opState.value == 2)\n    {\n        let setRelay = 1;\n        if (trays[ii].maxRate.value >= flow.get('spotPrice')[trays[ii].priceArea.value])\n        {\n            setRelay = 0;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n// End  custom\n}\nif (settingArray.length < 1) return null;\nreturn {topic:'settingArray', payload:settingArray};\n\n//Got this from:https://stackoverflow.com/questions/10087819/convert-date-to-another-timezone-in-javascript\nfunction convertTZ(date, tzString) \n{\n    return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: tzString}));   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 380,
        "wires": [
            [
                "133c36a65ae85c5c"
            ]
        ]
    },
    {
        "id": "438d2c7471c82d48",
        "type": "inject",
        "z": "13a1f6b35420cd30",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "14d57e6be62689a9"
            ]
        ]
    },
    {
        "id": "14d57e6be62689a9",
        "type": "function",
        "z": "13a1f6b35420cd30",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 680,
        "wires": []
    },
    {
        "id": "03844418612679f8",
        "type": "link in",
        "z": "13a1f6b35420cd30",
        "name": "Spot Price In",
        "links": [
            "a22129cb393da53e"
        ],
        "x": 95,
        "y": 740,
        "wires": [
            [
                "14d57e6be62689a9"
            ]
        ]
    },
    {
        "id": "40c6b453f1ee89b6",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Prepare DB Query",
        "func": "flow.set('settingInProgress',false);\nflow.set(\"trayType\", msg.payload.trayType);\nflow.set(\"mqttReadBufferSize\", msg.payload.mqttReadBufferSize);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 393,
        "y": 85,
        "wires": [
            [
                "f0bd05651ecefdf4"
            ]
        ]
    },
    {
        "id": "f0bd05651ecefdf4",
        "type": "mongodb3 in",
        "z": "f15328c23f2596ab",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 573,
        "y": 85,
        "wires": [
            [
                "90339a6d775b0796"
            ]
        ]
    },
    {
        "id": "90339a6d775b0796",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 753,
        "y": 85,
        "wires": [
            [
                "91538f93f37fb506"
            ]
        ]
    },
    {
        "id": "91538f93f37fb506",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "137bbce60f2b08dc",
            "909562dc71487d37"
        ],
        "x": 1018,
        "y": 85,
        "wires": []
    },
    {
        "id": "f40e9832ea3171d0",
        "type": "json",
        "z": "f15328c23f2596ab",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 353,
        "y": 265,
        "wires": [
            [
                "d4290b4c1b6f271e"
            ]
        ]
    },
    {
        "id": "d4290b4c1b6f271e",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 503,
        "y": 265,
        "wires": [
            [
                "557c88f0142bb4b4"
            ]
        ]
    },
    {
        "id": "b1f8fce9f92d8305",
        "type": "mqtt in",
        "z": "f15328c23f2596ab",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 173,
        "y": 265,
        "wires": [
            [
                "f40e9832ea3171d0"
            ]
        ]
    },
    {
        "id": "893f7e9d43737499",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 253,
        "y": 185,
        "wires": [
            [
                "b1f8fce9f92d8305"
            ]
        ]
    },
    {
        "id": "137bbce60f2b08dc",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Box Subscribe Setup in",
        "links": [
            "91538f93f37fb506"
        ],
        "x": 98,
        "y": 185,
        "wires": [
            [
                "893f7e9d43737499"
            ]
        ]
    },
    {
        "id": "33a2ed136f3077c3",
        "type": "mqtt out",
        "z": "f15328c23f2596ab",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1243,
        "y": 165,
        "wires": []
    },
    {
        "id": "557c88f0142bb4b4",
        "type": "switch",
        "z": "f15328c23f2596ab",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 663,
        "y": 265,
        "wires": [
            [
                "333bc95a68907a66"
            ],
            [
                "71a9903bb0c4188f"
            ],
            [
                "63cece242d1f8419"
            ]
        ]
    },
    {
        "id": "4733c0b3157992e9",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1393,
        "y": 265,
        "wires": [
            [
                "5d681457c557d6a6"
            ]
        ]
    },
    {
        "id": "7026e5f8b4c575e6",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "05cdffce940a50bf",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "314b6d794faccd3d",
            "29185f480791a374",
            "37b3bf6978c8c50a"
        ],
        "x": 1118,
        "y": 265,
        "wires": [
            [
                "986ac0ef63a87c60"
            ]
        ]
    },
    {
        "id": "314b6d794faccd3d",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "7026e5f8b4c575e6"
        ],
        "x": 1018,
        "y": 265,
        "wires": []
    },
    {
        "id": "29185f480791a374",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "7026e5f8b4c575e6",
            "e85150fa79d8d72b"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "25c4b31463429759",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "1783c5357f7337f1"
        ],
        "x": 1018,
        "y": 165,
        "wires": []
    },
    {
        "id": "d39618c093d1b5ad",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "deviceMQTT publish",
        "links": [
            "44f9a2fb5b5b65b4"
        ],
        "x": 1118,
        "y": 165,
        "wires": [
            [
                "33a2ed136f3077c3"
            ]
        ]
    },
    {
        "id": "63cece242d1f8419",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 883,
        "y": 325,
        "wires": [
            [
                "05cdffce940a50bf"
            ]
        ]
    },
    {
        "id": "05cdffce940a50bf",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "Continue Devie Readings out",
        "links": [
            "7026e5f8b4c575e6",
            "05c0c7b4f59ca88d"
        ],
        "x": 1018,
        "y": 325,
        "wires": []
    },
    {
        "id": "54680d719083e5e5",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1393,
        "y": 325,
        "wires": [
            [
                "3c52e4f478dcd0b6"
            ]
        ]
    },
    {
        "id": "e85150fa79d8d72b",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Archive Tray In",
        "links": [
            "29185f480791a374",
            "b0a82b313ac09e45"
        ],
        "x": 1118,
        "y": 325,
        "wires": [
            [
                "c2264518d4562ec4"
            ]
        ]
    },
    {
        "id": "3c52e4f478dcd0b6",
        "type": "delay",
        "z": "f15328c23f2596ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1543,
        "y": 325,
        "wires": [
            [
                "5d681457c557d6a6"
            ]
        ]
    },
    {
        "id": "986ac0ef63a87c60",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1233,
        "y": 265,
        "wires": [
            [
                "4733c0b3157992e9"
            ]
        ]
    },
    {
        "id": "c2264518d4562ec4",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1233,
        "y": 325,
        "wires": [
            [
                "54680d719083e5e5"
            ]
        ]
    },
    {
        "id": "5d681457c557d6a6",
        "type": "mqtt out",
        "z": "f15328c23f2596ab",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1713,
        "y": 265,
        "wires": []
    },
    {
        "id": "71a9903bb0c4188f",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 863,
        "y": 265,
        "wires": [
            [
                "314b6d794faccd3d"
            ]
        ]
    },
    {
        "id": "b3f717885355ee3f",
        "type": "mqtt in",
        "z": "f15328c23f2596ab",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 653,
        "y": 505,
        "wires": [
            [
                "98d74eadd776f6c4"
            ]
        ]
    },
    {
        "id": "37b3bf6978c8c50a",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "7026e5f8b4c575e6"
        ],
        "x": 1018,
        "y": 465,
        "wires": []
    },
    {
        "id": "909562dc71487d37",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Device Subscribe Setup in",
        "links": [
            "91538f93f37fb506"
        ],
        "x": 98,
        "y": 505,
        "wires": [
            [
                "cfba724abbf34038"
            ]
        ]
    },
    {
        "id": "b0a82b313ac09e45",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "e85150fa79d8d72b"
        ],
        "x": 1018,
        "y": 505,
        "wires": []
    },
    {
        "id": "417053b02780bdac",
        "type": "split",
        "z": "f15328c23f2596ab",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "9940ab5753add07c"
            ]
        ]
    },
    {
        "id": "44f9a2fb5b5b65b4",
        "type": "link out",
        "z": "f15328c23f2596ab",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "d39618c093d1b5ad"
        ],
        "x": 1875,
        "y": 540,
        "wires": []
    },
    {
        "id": "9940ab5753add07c",
        "type": "delay",
        "z": "f15328c23f2596ab",
        "name": "Rate Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1420,
        "y": 560,
        "wires": [
            [
                "a177dcdf0ad9a798"
            ]
        ]
    },
    {
        "id": "c32406cbf7322968",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer)};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "44f9a2fb5b5b65b4"
            ]
        ]
    },
    {
        "id": "3c012ce91f0b2a55",
        "type": "inject",
        "z": "f15328c23f2596ab",
        "name": "Every 10 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 163,
        "y": 385,
        "wires": [
            [
                "c57fb9997d728dc6"
            ]
        ]
    },
    {
        "id": "52f844380f063a8d",
        "type": "split",
        "z": "f15328c23f2596ab",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 593,
        "y": 385,
        "wires": [
            [
                "fef8ddafb791db44"
            ]
        ]
    },
    {
        "id": "fef8ddafb791db44",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Shift up",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 723,
        "y": 385,
        "wires": [
            [
                "d4290b4c1b6f271e"
            ]
        ]
    },
    {
        "id": "d1f7dbb67c317e36",
        "type": "inject",
        "z": "f15328c23f2596ab",
        "g": "5fa9c0075cec33a8",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"blinky-pico-ivt\",\"mqttReadBufferSize\":18}",
        "payloadType": "json",
        "x": 183,
        "y": 85,
        "wires": [
            [
                "40c6b453f1ee89b6"
            ]
        ]
    },
    {
        "id": "333bc95a68907a66",
        "type": "function",
        "z": "f15328c23f2596ab",
        "g": "1ed65ce2c7bacaa8",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\n// End Custom\nlet blinkyBusMessage = false;\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nswitch(msg.payload.cube)\n{\n    case 'power':\n        blinkyBusSettingMsg.payload.address = 3;\n        blinkyBusMessage = true;\n        tray.power.value = blinkyBusSettingMsg.payload.value;\n        break;\n    case 'mode':\n        blinkyBusSettingMsg.payload.address = 4;\n        blinkyBusMessage = true;\n        tray.mode.value = blinkyBusSettingMsg.payload.value;\n        if (tray.mode.value == 6)\n        {\n            tray.temperature.value = 10;\n            tray.fan.value = 0;\n        }\n        break;\n    case 'fan':\n        blinkyBusSettingMsg.payload.address = 5;\n        blinkyBusMessage = true;\n        tray.fan.value = blinkyBusSettingMsg.payload.value;\n        break;\n    case 'temperature':\n        blinkyBusSettingMsg.payload.address = 6;\n        blinkyBusMessage = true;\n        tray.temperature.value = blinkyBusSettingMsg.payload.value;\n        if (tray.mode.value != 6)\n        {\n            if (tray.temperature.value < 16) tray.temperature.value = 16;\n            if (tray.temperature.value > 30) tray.temperature.value = 30;\n        }\n        break;\n    case 'opState':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n   case 'startScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'maxRate':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'alias':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'priceArea':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'timeZone':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    let mqttMsg = {topic:'setDevice', payload:tray};\n    msgArray = [mqttMsg, {topic:'settingDone', payload:tray}];\n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 883,
        "y": 185,
        "wires": [
            [
                "25c4b31463429759"
            ],
            [
                "29185f480791a374"
            ]
        ]
    },
    {
        "id": "98d74eadd776f6c4",
        "type": "function",
        "z": "f15328c23f2596ab",
        "g": "3d343da97c401351",
        "name": "Create Readings",
        "func": "if (flow.get('settingInProgress')) return [null,null,null];\nlet trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[0].indexOf(trayType) != 0) return [null,null,null];\nlet trayName = topicSplit[1];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return [null,null,null];\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n\nlet serialBufSize = flow.get('mqttReadBufferSize');\nlet dataView     = new DataView(new ArrayBuffer(2));\nlet dataBuffer = [];\nfor (let ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nif (dataBuffer[0] == 1)\n{\n    let initDeviceMsg = {topic:\"initDevice\",payload:tray};\n    return [null, null, initDeviceMsg];\n}\n \n// Start Custom \ntray.watchdog.value     = dataBuffer[1];\ntray.chipTemp.value     = dataBuffer[2] / 100;\ntray.power.value        = dataBuffer[3];\ntray.mode.value         = dataBuffer[4];\ntray.fan.value          = dataBuffer[5];\ntray.temperature.value  = dataBuffer[6];\ntray.hours.value        = dataBuffer[7];\ntray.mins.value         = dataBuffer[8];\n\nnewData = true;\n// End custom\n\nif (!newData) return null;\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 873,
        "y": 505,
        "wires": [
            [
                "37b3bf6978c8c50a"
            ],
            [
                "b0a82b313ac09e45"
            ],
            [
                "2ac586e466ba8ab8"
            ]
        ]
    },
    {
        "id": "cfba724abbf34038",
        "type": "function",
        "z": "f15328c23f2596ab",
        "g": "5e67e38fdcb931c5",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"blinky-pico-ivt\" + \"/+/reading\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 423,
        "y": 505,
        "wires": [
            [
                "b3f717885355ee3f"
            ]
        ]
    },
    {
        "id": "2ac586e466ba8ab8",
        "type": "function",
        "z": "f15328c23f2596ab",
        "g": "3e01cf7c6b42164e",
        "name": "Init Gizmo",
        "func": "var tray = msg.payload;\nlet now = new Date();\ntray.hours.value = now.getHours();\ntray.mins.value  = now.getMinutes();\nif(isNaN(tray.temperature.value)) tray.temperature.value = 18;\ntray.temperature.value = Math.round(tray.temperature.value);\n\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nmsgs[1] = {\"address\":3,\"value\":tray.power.value};\nmsgs[2] = {\"address\":4,\"value\":tray.mode.value};\nmsgs[3] = {\"address\":5,\"value\":tray.fan.value};\nmsgs[4] = {\"address\":6,\"value\":tray.temperature.value};\nmsgs[5] = {\"address\":7,\"value\":tray.hours.value};\nmsgs[6] = {\"address\":8,\"value\":tray.mins.value };\nmsgs[7] = {\"address\":-1,\"value\":0 };\n\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\nflow.set('settingInProgress',true);\nreturn {topic : publishTopic, payload: msgs,rate:200};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1123,
        "y": 565,
        "wires": [
            [
                "417053b02780bdac"
            ]
        ]
    },
    {
        "id": "c57fb9997d728dc6",
        "type": "function",
        "z": "f15328c23f2596ab",
        "g": "d35b94b9c9b60af6",
        "name": "SpotPrice and Schedule",
        "func": "let trays = flow.get('trays');\nif (trays == undefined) return null;\nlet now = new Date();\n\nlet settingArray = [];\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n// Start custom\n    if (trays[ii].opState.value == 1)\n    {\n        let power = 0;\n        let hours = convertTZ(now, trays[ii].timeZone.value).getHours();\n        if (trays[ii].startScheduleTime.value > trays[ii].stopScheduleTime.value)\n        {\n            if (trays[ii].startScheduleTime.value <= hours) power = 1;\n            if (hours < trays[ii].stopScheduleTime.value )  power = 1;\n        }\n        else\n        {\n            if ((trays[ii].startScheduleTime.value <= hours) && (hours < trays[ii].stopScheduleTime.value) ) power = 1;\n        }\n        if (power != trays[ii].power.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'power',value:power}});\n        }\n    }\n    if (trays[ii].opState.value == 2)\n    {\n        let power = 0;\n        if (trays[ii].maxRate.value >= flow.get('spotPrice')[trays[ii].priceArea.value])\n        {\n            power = 1;\n        }\n        if (power != trays[ii].power.value)\n        {\n            let topic = flow.get('box') + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'power',value:power}});\n        }\n    }\n// End  custom\n}\nif (settingArray.length < 1) return null;\nreturn {topic:'settingArray', payload:settingArray};\n\n//Got this from:https://stackoverflow.com/questions/10087819/convert-date-to-another-timezone-in-javascript\nfunction convertTZ(date, tzString) \n{\n    return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: tzString}));   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 393,
        "y": 385,
        "wires": [
            [
                "52f844380f063a8d"
            ]
        ]
    },
    {
        "id": "bb53062ea627faec",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Allow Readings",
        "func": "flow.set('settingInProgress',false);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 600,
        "wires": []
    },
    {
        "id": "a177dcdf0ad9a798",
        "type": "switch",
        "z": "f15328c23f2596ab",
        "name": "",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1550,
        "y": 560,
        "wires": [
            [
                "c32406cbf7322968"
            ],
            [
                "b07bd2f47f5da366"
            ]
        ]
    },
    {
        "id": "b07bd2f47f5da366",
        "type": "delay",
        "z": "f15328c23f2596ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1680,
        "y": 600,
        "wires": [
            [
                "bb53062ea627faec"
            ]
        ]
    },
    {
        "id": "1783c5357f7337f1",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Batch  setDevice",
        "links": [
            "25c4b31463429759"
        ],
        "x": 995,
        "y": 600,
        "wires": [
            [
                "2ac586e466ba8ab8"
            ]
        ]
    },
    {
        "id": "406b8e050fbed269",
        "type": "inject",
        "z": "f15328c23f2596ab",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "7749ee9cdb7b66ba"
            ]
        ]
    },
    {
        "id": "7749ee9cdb7b66ba",
        "type": "function",
        "z": "f15328c23f2596ab",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 700,
        "wires": []
    },
    {
        "id": "6908fafb2e7555cb",
        "type": "link in",
        "z": "f15328c23f2596ab",
        "name": "Spot Price In",
        "links": [
            "a22129cb393da53e"
        ],
        "x": 95,
        "y": 760,
        "wires": [
            [
                "7749ee9cdb7b66ba"
            ]
        ]
    },
    {
        "id": "30d80c15f5ad5490",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Prepare DB Query",
        "func": "flow.set(\"trayType\", msg.payload.trayType);\nflow.set(\"mqttReadBufferSize\", msg.payload.mqttReadBufferSize);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "d3bf380dc879cbe8"
            ]
        ]
    },
    {
        "id": "d3bf380dc879cbe8",
        "type": "mongodb3 in",
        "z": "366ee1704c7abe9f",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "b6455fcd0e1cec25"
            ]
        ]
    },
    {
        "id": "b6455fcd0e1cec25",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "2ac02b42dfbe03f9"
            ]
        ]
    },
    {
        "id": "2ac02b42dfbe03f9",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "c02875f96bacad1b",
            "b9fd4cb97463dd40"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "1288f42a9cc05b4a",
        "type": "json",
        "z": "366ee1704c7abe9f",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "32cec46a2566d052"
            ]
        ]
    },
    {
        "id": "32cec46a2566d052",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "34c1444325608a0d"
            ]
        ]
    },
    {
        "id": "98a31b585fe6f021",
        "type": "mqtt in",
        "z": "366ee1704c7abe9f",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "1288f42a9cc05b4a"
            ]
        ]
    },
    {
        "id": "9210746c7b3980eb",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "98a31b585fe6f021"
            ]
        ]
    },
    {
        "id": "c02875f96bacad1b",
        "type": "link in",
        "z": "366ee1704c7abe9f",
        "name": "Box Subscribe Setup in",
        "links": [
            "2ac02b42dfbe03f9"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "9210746c7b3980eb"
            ]
        ]
    },
    {
        "id": "f4ce56fb05a9defa",
        "type": "mqtt out",
        "z": "366ee1704c7abe9f",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "34c1444325608a0d",
        "type": "switch",
        "z": "366ee1704c7abe9f",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "5cc80f33f8de1a71"
            ],
            [
                "63a14282ca5a8c4f"
            ],
            [
                "8d2ac1ee95713108"
            ]
        ]
    },
    {
        "id": "bdf5f689bbc72dec",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "5774d15b624f7570"
            ]
        ]
    },
    {
        "id": "d4ba89263003314b",
        "type": "link in",
        "z": "366ee1704c7abe9f",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "309d8e7752066689",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "0357f0325cb8b46a",
            "8b3e21e30beb1d13",
            "fe5aeb3fced47e9e"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "6a175a75a1b87737"
            ]
        ]
    },
    {
        "id": "0357f0325cb8b46a",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "d4ba89263003314b"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "8b3e21e30beb1d13",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "d4ba89263003314b",
            "46acf90c383d38c0"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "0d7589cff03f3f2f",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "d49f24985bc2a29f"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "d49f24985bc2a29f",
        "type": "link in",
        "z": "366ee1704c7abe9f",
        "name": "deviceMQTT publish",
        "links": [
            "0d7589cff03f3f2f",
            "fa0bc19e30e0d567"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "f4ce56fb05a9defa"
            ]
        ]
    },
    {
        "id": "8d2ac1ee95713108",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "309d8e7752066689"
            ]
        ]
    },
    {
        "id": "309d8e7752066689",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "Continue Devie Readings out",
        "links": [
            "d4ba89263003314b",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "0445c73a794bda7a",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "cb382f2e3f491a25"
            ]
        ]
    },
    {
        "id": "46acf90c383d38c0",
        "type": "link in",
        "z": "366ee1704c7abe9f",
        "name": "Archive Tray In",
        "links": [
            "8b3e21e30beb1d13",
            "1113ed222cc1cb51"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "dcdfc2da58912ea6"
            ]
        ]
    },
    {
        "id": "cb382f2e3f491a25",
        "type": "delay",
        "z": "366ee1704c7abe9f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "5774d15b624f7570"
            ]
        ]
    },
    {
        "id": "6a175a75a1b87737",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "bdf5f689bbc72dec"
            ]
        ]
    },
    {
        "id": "dcdfc2da58912ea6",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "0445c73a794bda7a"
            ]
        ]
    },
    {
        "id": "5774d15b624f7570",
        "type": "mqtt out",
        "z": "366ee1704c7abe9f",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "63a14282ca5a8c4f",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "0357f0325cb8b46a"
            ]
        ]
    },
    {
        "id": "b65f16a58389ab5e",
        "type": "mqtt in",
        "z": "366ee1704c7abe9f",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "3e8b0510063901ce"
            ]
        ]
    },
    {
        "id": "fe5aeb3fced47e9e",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "d4ba89263003314b"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "b9fd4cb97463dd40",
        "type": "link in",
        "z": "366ee1704c7abe9f",
        "name": "Device Subscribe Setup in",
        "links": [
            "2ac02b42dfbe03f9"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "7e7ef2406df14623"
            ]
        ]
    },
    {
        "id": "1113ed222cc1cb51",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "46acf90c383d38c0"
        ],
        "x": 1015,
        "y": 500,
        "wires": []
    },
    {
        "id": "456ae0dc191ef7fb",
        "type": "split",
        "z": "366ee1704c7abe9f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "d3101e8bb3319244"
            ]
        ]
    },
    {
        "id": "fa0bc19e30e0d567",
        "type": "link out",
        "z": "366ee1704c7abe9f",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "d49f24985bc2a29f"
        ],
        "x": 1755,
        "y": 560,
        "wires": []
    },
    {
        "id": "c54f9fe58c4da244",
        "type": "delay",
        "z": "366ee1704c7abe9f",
        "name": "Rate Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1660,
        "y": 560,
        "wires": [
            [
                "fa0bc19e30e0d567"
            ]
        ]
    },
    {
        "id": "d3101e8bb3319244",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer),rate:500};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            [
                "c54f9fe58c4da244"
            ]
        ]
    },
    {
        "id": "59e9a29853707de3",
        "type": "inject",
        "z": "366ee1704c7abe9f",
        "g": "5b6c9e070d26d39c",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"blinky-DS18B20-p\",\"mqttReadBufferSize\":10}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "30d80c15f5ad5490"
            ]
        ]
    },
    {
        "id": "5cc80f33f8de1a71",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "g": "2879b2779d8f67a2",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\n// End Custom\nlet blinkyBusMessage = false;\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nswitch(msg.payload.cube)\n{\n    case 'chipTempOffset':\n        tray.chipTempOffset.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'tempAOffset':\n        tray.tempAOffset.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'tempBOffset':\n        tray.tempBOffset.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'alias':\n        tray.alias.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    let bufsize = 4;\n    let buffer = new ArrayBuffer(bufsize);\n    let settingsView = new DataView(buffer);\n    settingsView.setUint8(0, 1); //setting\n    settingsView.setUint8(1, blinkyBusSettingMsg.payload.address); //address\n    settingsView.setInt16(2, blinkyBusSettingMsg.payload.value, true); //value\n    let mqttMsg = {topic:blinkyBusSettingMsg.topic, payload:Buffer.from(buffer)};\n    msgArray = [mqttMsg, {topic:'settingDone', payload:tray}];\n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "0d7589cff03f3f2f"
            ],
            [
                "8b3e21e30beb1d13"
            ]
        ]
    },
    {
        "id": "3e8b0510063901ce",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "g": "82cda89bad040927",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[0].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[1];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n\nlet serialBufSize = flow.get('mqttReadBufferSize');\nlet dataView     = new DataView(new ArrayBuffer(2));\nlet dataBuffer = [];\nfor (let ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nif (dataBuffer[0] == 1)\n{\n     let initDeviceMsg = {topic:\"initDevice\",payload:tray};\n    return [null, null, initDeviceMsg];\n}\nlet badData = false;\nif (dataBuffer[3] == -100) badData = true;\nif (dataBuffer[4] == -100) badData = true;\nif (dataBuffer[1] < 4)    badData = true;\n// Start Custom \nif(!badData)\n{\n    tray.watchdog.value  = dataBuffer[1];\n    tray.chipTemp.value  = (dataBuffer[2] / 100) - tray.chipTempOffset.value;\n    tray.chipTemp.value = Math.round(100 * tray.chipTemp.value) / 100;\n    if ((-3000 < dataBuffer[3]) && (dataBuffer[3] < 13000))\n    {\n        tray.tempA.value     = (dataBuffer[3] / 100) - tray.tempAOffset.value;\n        tray.tempA.value = Math.round(100 * tray.tempA.value) / 100;\n    }\n    if ((-3000 < dataBuffer[4]) && (dataBuffer[4] < 13000))\n    {\n        tray.tempB.value     = (dataBuffer[4] / 100) - tray.tempBOffset.value;\n        tray.tempB.value = Math.round(100 * tray.tempB.value) / 100;\n    }\n    tray.deltaTemp.value = Math.round(100 * (tray.tempA.value - tray.tempB.value)) / 100;\n}\n\nnewData = !badData;\n// End custom\n\nif (!newData) return null;\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "fe5aeb3fced47e9e"
            ],
            [
                "1113ed222cc1cb51"
            ],
            [
                "0cead15f5e3ca728"
            ]
        ]
    },
    {
        "id": "7e7ef2406df14623",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "g": "9010093235c17c61",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"blinky-DS18B20-p\" + \"/+/reading\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "b65f16a58389ab5e"
            ]
        ]
    },
    {
        "id": "0cead15f5e3ca728",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "g": "4a1297c9e7749ced",
        "name": "Init Gizmo",
        "func": "var tray = msg.payload;\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\nreturn {topic : publishTopic, payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "456ae0dc191ef7fb"
            ]
        ]
    },
    {
        "id": "f68b460bd6552b12",
        "type": "inject",
        "z": "366ee1704c7abe9f",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "e48da23477c115b4"
            ]
        ]
    },
    {
        "id": "e48da23477c115b4",
        "type": "function",
        "z": "366ee1704c7abe9f",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 720,
        "wires": []
    },
    {
        "id": "e098034395b0e5f9",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Date Params",
        "func": "let trays = flow.get('trays');\nlet queryArray = [];\nlet nowTime = new Date().getTime();\nlet urlStart = \"https://web-api.tp.entsoe.eu/api?documentType=A44\";\nurlStart = urlStart + \"&securityToken=\" + flow.get(\"entsoeToken\");\nurlStart = urlStart + \"&periodStart=\" + getDateString(nowTime - 144000000);\nurlStart = urlStart + \"&periodEnd=\"   + getDateString(nowTime + 144000000);\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    let url = urlStart + \"&in_Domain=\" + trays[ii].eicAreaCode.value;\n    url = url + \"&out_Domain=\" + trays[ii].eicAreaCode.value;\n    queryArray.push({topic:trays[ii].name, url:url, tray:trays[ii]});\n}\nreturn {topic:\"query\", payload:queryArray};\nfunction getDateString(time)\n{\n    let dateObj = new Date(time);\n    let dateString = dateObj.getUTCFullYear().toString();\n    let month = dateObj.getUTCMonth() + 1;\n    if (month < 10) dateString = dateString + \"0\";\n    dateString = dateString + month.toString();\n    let date = dateObj.getUTCDate();\n    if (date < 10) dateString = dateString + \"0\";\n    dateString = dateString + date.toString();\n    let hours = dateObj.getUTCHours();\n    if (hours < 10) dateString = dateString + \"0\";\n    dateString = dateString + hours.toString();\n    dateString = dateString + \"00\";\n    return dateString;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "7b2ccb4a6ccc1d11"
            ]
        ]
    },
    {
        "id": "d45c328b7b22030b",
        "type": "http request",
        "z": "7d1a76edaab21298",
        "name": "entsoe",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "eb77340695a68ce8"
            ]
        ]
    },
    {
        "id": "eb77340695a68ce8",
        "type": "xml2json",
        "z": "7d1a76edaab21298",
        "name": "Parse xml to json",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "585525085a37a1c3"
            ]
        ]
    },
    {
        "id": "585525085a37a1c3",
        "type": "json",
        "z": "7d1a76edaab21298",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1190,
        "y": 220,
        "wires": [
            [
                "2275cee64ac3f438"
            ]
        ]
    },
    {
        "id": "45a2f24a69645fa8",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "name": "ENTSOE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "entsoeToken",
        "payload": "ENTSOE",
        "payloadType": "env",
        "x": 1140,
        "y": 80,
        "wires": [
            [
                "865fd3896a0cd62c"
            ]
        ]
    },
    {
        "id": "865fd3896a0cd62c",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Save entsoeToken",
        "func": "flow.set('entsoeToken',msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 80,
        "wires": []
    },
    {
        "id": "2275cee64ac3f438",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Parse Data",
        "func": "let queryData = null;\ntry \n{\n    queryData = msg.payload.Publication_MarketDocument.TimeSeries;\n} catch (error) \n{\n  node.warn(msg);\n  return [null,null]\n}\n\nlet timeStampArray = [];\nlet priceArray = [];\nlet previousHour = new Date();\npreviousHour.setMinutes(0);\npreviousHour.setSeconds(0);\npreviousHour.setMilliseconds(0);\nlet cutTime = previousHour.getTime();\nlet exchangeRateTray = flow.get('exchangeRateTray');\n\nmsg.tray.exchangeRate.value = exchangeRateTray[msg.tray.exchangeRate.unit].value;\n\nfor (let iday = 0; iday < queryData.length; ++iday)\n{\n    let timeStamp = Date.parse(queryData[iday].Period.timeInterval.start);\n    if (queryData[iday].Period.resolution == \"PT60M\")\n    {\n        for (let ihour = 0; ihour < queryData[iday].Period.Point.length; ++ihour)\n        {\n            if (timeStamp >= cutTime)\n            {\n                timeStampArray.push(timeStamp);\n                let price = Number(queryData[iday].Period.Point[ihour]['price.amount']);\n                price = Math.round(price * msg.tray.exchangeRate.value)  / 1000;  // 1000 is to get in kwHr\n                priceArray.push(price);\n            }\n            timeStamp = timeStamp + 3600000;\n        }\n    }\n}\nmsg.tray.price.value = priceArray[0];\nmsg.tray.priceTime.value = timeStampArray[0];\nmsg.tray.futurePrice.value = [[],[]];\nfor (let ii = 1; ii < timeStampArray.length; ++ii)\n{\n    msg.tray.futurePrice.value[0].push(timeStampArray[ii]);\n    msg.tray.futurePrice.value[1].push(priceArray[ii]);\n}\nlet priceAreaTrays = flow.get('trays');\nfor (let itray = 0; itray < priceAreaTrays.length; ++itray)\n{\n    if (msg.tray.name == priceAreaTrays[itray].name) priceAreaTrays[itray] = JSON.parse(JSON.stringify(msg.tray));\n}\n\nlet topic = flow.get('box') + '/' + msg.tray.type + '/' + msg.tray.name;\nlet readingMsg = {topic: topic + '/' + 'reading',payload:JSON.stringify(msg.tray)};\nlet archiveMsg = {topic: topic + '/' + 'archive',payload:JSON.stringify(msg.tray)};\nreturn[readingMsg,archiveMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "ed3fe756214466f4"
            ],
            [
                "6d2cb33659b3ba3c"
            ]
        ]
    },
    {
        "id": "b2d2461e3bcfb015",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Prepare DB Query",
        "func": "flow.set(\"trayType\", msg.payload.trayType);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "0ddd850a0664cfe3"
            ]
        ]
    },
    {
        "id": "0ddd850a0664cfe3",
        "type": "mongodb3 in",
        "z": "7d1a76edaab21298",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "41d4091d41a65802"
            ]
        ]
    },
    {
        "id": "41d4091d41a65802",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n}\nflow.set('trays',trays);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "e098034395b0e5f9",
                "0c7c587a20dae0a9"
            ]
        ]
    },
    {
        "id": "670335bae8ab73c2",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "g": "bf417de70a5b1611",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"espotPrice\"}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "b2d2461e3bcfb015"
            ]
        ]
    },
    {
        "id": "7b2ccb4a6ccc1d11",
        "type": "split",
        "z": "7d1a76edaab21298",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "fd3b1b5e2db9c113"
            ]
        ]
    },
    {
        "id": "fe08ce21b5066adf",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "e098034395b0e5f9"
            ]
        ]
    },
    {
        "id": "fd3b1b5e2db9c113",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "promote",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "c41e9dc1ae738378"
            ]
        ]
    },
    {
        "id": "c41e9dc1ae738378",
        "type": "delay",
        "z": "7d1a76edaab21298",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 220,
        "wires": [
            [
                "d45c328b7b22030b"
            ]
        ]
    },
    {
        "id": "313e3b29786c6378",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "name": "At 2pm",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 1-21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "e098034395b0e5f9"
            ]
        ]
    },
    {
        "id": "ed3fe756214466f4",
        "type": "mqtt out",
        "z": "7d1a76edaab21298",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1610,
        "y": 380,
        "wires": []
    },
    {
        "id": "6d2cb33659b3ba3c",
        "type": "delay",
        "z": "7d1a76edaab21298",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1330,
        "y": 260,
        "wires": [
            [
                "ed3fe756214466f4"
            ]
        ]
    },
    {
        "id": "ae343809b268eb0b",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "name": "Every 15 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": "6",
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "0c7c587a20dae0a9"
            ]
        ]
    },
    {
        "id": "bb623041bae04ad4",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Shift future Price",
        "func": "let priceAreaTrays = flow.get('trays');\nlet now = new Date().getTime();\nfor (let itray = 0; itray < priceAreaTrays.length; ++itray)\n{\n    while (priceAreaTrays[itray].futurePrice.value[0][1] < now)\n    {\n        priceAreaTrays[itray].futurePrice.value[0].shift();\n        priceAreaTrays[itray].futurePrice.value[1].shift();\n    }\n    priceAreaTrays[itray].price.value = priceAreaTrays[itray].futurePrice.value[1][0];\n    priceAreaTrays[itray].priceTime.value = priceAreaTrays[itray].futurePrice.value[0][0];\n}\nreturn {topic:'priceAreaTrays', payload:priceAreaTrays};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "a9980c59bee61079"
            ]
        ]
    },
    {
        "id": "0c7c587a20dae0a9",
        "type": "delay",
        "z": "7d1a76edaab21298",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 380,
        "wires": [
            [
                "bb623041bae04ad4"
            ]
        ]
    },
    {
        "id": "a9980c59bee61079",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Publish priceTrays",
        "func": "let priceAreaTrays = msg.payload;\nlet mqttArray = [];\nlet spotPrice = {};\nfor (let itray = 0; itray < priceAreaTrays.length; ++itray)\n{\n    let topic = flow.get('box') + '/' + priceAreaTrays[itray].type + '/' + priceAreaTrays[itray].name;\n    mqttArray.push({topic: topic + '/' + 'reading',payload:priceAreaTrays[itray]})\n    mqttArray.push({topic: topic + '/' + 'archive',payload:JSON.stringify(priceAreaTrays[itray])});\n    spotPrice[priceAreaTrays[itray].name] = priceAreaTrays[itray].price.value;\n}\nreturn [{topic:'publishTray',payload:mqttArray},{topic:'spotPrice',payload:spotPrice}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "388b3014343c6069"
            ],
            [
                "a22129cb393da53e"
            ]
        ]
    },
    {
        "id": "388b3014343c6069",
        "type": "split",
        "z": "7d1a76edaab21298",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 380,
        "wires": [
            [
                "2ffec03a48d07082"
            ]
        ]
    },
    {
        "id": "2ffec03a48d07082",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Shift",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "ca52146e3d8bcf2b"
            ]
        ]
    },
    {
        "id": "ca52146e3d8bcf2b",
        "type": "delay",
        "z": "7d1a76edaab21298",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "ed3fe756214466f4"
            ]
        ]
    },
    {
        "id": "6b3853011c39b684",
        "type": "json",
        "z": "7d1a76edaab21298",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 540,
        "wires": [
            [
                "6d1605f0146837d2"
            ]
        ]
    },
    {
        "id": "3199fbe75f51a205",
        "type": "switch",
        "z": "7d1a76edaab21298",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 540,
        "wires": [
            [
                "655b9aeb81fa5d27"
            ],
            [
                "cd9fec467f194053"
            ]
        ]
    },
    {
        "id": "6d1605f0146837d2",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload,priceArea:msg.topic.split('/')[2]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            [
                "3199fbe75f51a205"
            ]
        ]
    },
    {
        "id": "cd9fec467f194053",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Save Config",
        "func": "let priceAreaTrays = flow.get('trays');\nlet trayIndex = -1;\nfor (let itray = 0; itray < priceAreaTrays.length; ++itray)\n{\n    if (msg.priceArea == priceAreaTrays[itray].name) trayIndex = itray;\n}\nif (trayIndex < 0) return null;\n\nlet cubeAlarm = priceAreaTrays[trayIndex][msg.payload.cube].alarm;\ncubeAlarm.value = 0;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'blinky-lite-v4/espotPrice/'+ msg.priceArea + '/reading', payload:JSON.stringify(priceAreaTrays[trayIndex])};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 560,
        "wires": [
            [
                "ed3fe756214466f4"
            ]
        ]
    },
    {
        "id": "655b9aeb81fa5d27",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Ping",
        "func": "let priceAreaTrays = flow.get('trays');\nlet trayIndex = -1;\nfor (let itray = 0; itray < priceAreaTrays.length; ++itray)\n{\n    if (msg.priceArea == priceAreaTrays[itray].name) trayIndex = itray;\n}\nif (trayIndex < 0) return null;\nreturn {topic:'blinky-lite-v4/espotPrice/'+ msg.priceArea + '/reading', payload:JSON.stringify(priceAreaTrays[trayIndex])};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 500,
        "wires": [
            [
                "ed3fe756214466f4"
            ]
        ]
    },
    {
        "id": "1368339fb3e8fe4f",
        "type": "mqtt in",
        "z": "7d1a76edaab21298",
        "name": "",
        "topic": "blinky-lite-v4/espotPrice/+/setting/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 540,
        "wires": [
            [
                "6b3853011c39b684"
            ]
        ]
    },
    {
        "id": "3ed53ddcc39516ab",
        "type": "inject",
        "z": "7d1a76edaab21298",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "5c72ba45883158ea"
            ]
        ]
    },
    {
        "id": "5c72ba45883158ea",
        "type": "function",
        "z": "7d1a76edaab21298",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 660,
        "wires": []
    },
    {
        "id": "a22129cb393da53e",
        "type": "link out",
        "z": "7d1a76edaab21298",
        "name": "spotPrice out",
        "mode": "link",
        "links": [
            "04e465623783d52c",
            "03844418612679f8",
            "6908fafb2e7555cb"
        ],
        "x": 885,
        "y": 420,
        "wires": []
    },
    {
        "id": "1103ee3e255c7bde",
        "type": "link in",
        "z": "7d1a76edaab21298",
        "name": "exchangeRate in",
        "links": [
            "b118828154bcb307"
        ],
        "x": 95,
        "y": 720,
        "wires": [
            [
                "5c72ba45883158ea"
            ]
        ]
    },
    {
        "id": "27850afd45f7c08b",
        "type": "inject",
        "z": "b3a029ced1268723",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "exchangeRateQuery",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "f116f43ef39d9da0"
            ]
        ]
    },
    {
        "id": "9b788e78c85aa562",
        "type": "http request",
        "z": "b3a029ced1268723",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 180,
        "wires": [
            [
                "2dfe96ef68c3b8d6"
            ]
        ]
    },
    {
        "id": "2dfe96ef68c3b8d6",
        "type": "json",
        "z": "b3a029ced1268723",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "bcbb3bad2817d650"
            ]
        ]
    },
    {
        "id": "fd05d8952b2e9e59",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "Prepare DB Query",
        "func": "return {topic: msg.payload.trayType,payload:[{$and : [ {type: msg.payload.trayType}, {name: msg.payload.name} ]}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "99547bda3635d893"
            ]
        ]
    },
    {
        "id": "99547bda3635d893",
        "type": "mongodb3 in",
        "z": "b3a029ced1268723",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "findOne",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "29cd5b9e211d9176"
            ]
        ]
    },
    {
        "id": "06333b8523546246",
        "type": "inject",
        "z": "b3a029ced1268723",
        "g": "2cd8901884380dc8",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "initTray",
        "payload": "{\"trayType\":\"euroExchangeRate\",\"name\":\"01\"}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "fd05d8952b2e9e59"
            ]
        ]
    },
    {
        "id": "29cd5b9e211d9176",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "Save Trays in flow",
        "func": "let tray = JSON.parse(JSON.stringify(msg.payload));\ndelete tray[\"_id\"];\nflow.set('exchangeRateTray',tray);\nreturn {topic:'traysRead',payload:true};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "f116f43ef39d9da0"
            ]
        ]
    },
    {
        "id": "f116f43ef39d9da0",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "ExchangeRateQuery",
        "func": "return {topic:\"exchangeRateQuery\",payload:\"\",url:flow.get(\"exchangeRateUrl\")};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "9b788e78c85aa562"
            ]
        ]
    },
    {
        "id": "a542189e5a5735c1",
        "type": "inject",
        "z": "b3a029ced1268723",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "exchangeRateUrl",
        "payload": "EXCHANGERATEURL",
        "payloadType": "env",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "7499bbeb5babac11"
            ]
        ]
    },
    {
        "id": "7499bbeb5babac11",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "ExchangeRate URL",
        "func": "flow.set(\"exchangeRateUrl\",msg.payload);\nreturn null",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "bcbb3bad2817d650",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "Parse Exchange Rates",
        "func": "if (msg.payload.status != \"success\")\n{\n    node.warn('Failed to get exchange rate');\n    return null;\n}\nlet exchangeRateTray = flow.get(\"exchangeRateTray\");\nfor (var key of Object.keys(exchangeRateTray)) \n{\n    if (exchangeRateTray[key].hasOwnProperty('action'))\n    {\n        if (msg.payload.rates.hasOwnProperty(key))\n        {\n            exchangeRateTray[key].value = Number(msg.payload.rates[key].rate);\n//            node.warn(key + \" rate:\" + exchangeRateTray[key].value.toString());\n        }\n        else\n        {\n            node.warn(\"Currency \" + key + \" missing.\");    \n        }\n    }\n}\nlet readMsg = \n{\n    topic: flow.get('box') + '/' + exchangeRateTray.type + '/' + exchangeRateTray.name + '/reading',\n    payload: JSON.stringify(exchangeRateTray)\n};\nlet archiveMsg = \n{\n    topic: flow.get('box') + '/' + exchangeRateTray.type + '/' + exchangeRateTray.name + '/archive',\n    payload: JSON.stringify(exchangeRateTray)\n};\nreturn [readMsg,archiveMsg, {topic:'exchangeRateTray',payload:exchangeRateTray}];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "b18a116864dbba8e"
            ],
            [
                "31f959b00ef703e9"
            ],
            [
                "b118828154bcb307"
            ]
        ]
    },
    {
        "id": "31f959b00ef703e9",
        "type": "delay",
        "z": "b3a029ced1268723",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 220,
        "wires": [
            [
                "b18a116864dbba8e"
            ]
        ]
    },
    {
        "id": "b18a116864dbba8e",
        "type": "mqtt out",
        "z": "b3a029ced1268723",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1250,
        "y": 180,
        "wires": []
    },
    {
        "id": "c723041c509bfa47",
        "type": "inject",
        "z": "b3a029ced1268723",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "609e19e13d2a2798"
            ]
        ]
    },
    {
        "id": "609e19e13d2a2798",
        "type": "function",
        "z": "b3a029ced1268723",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": []
    },
    {
        "id": "b118828154bcb307",
        "type": "link out",
        "z": "b3a029ced1268723",
        "name": "exchangeRate out",
        "mode": "link",
        "links": [
            "1103ee3e255c7bde"
        ],
        "x": 1025,
        "y": 280,
        "wires": []
    }
]