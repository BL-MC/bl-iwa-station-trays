[
    {
        "id": "35ebad916f0a27ed",
        "type": "tab",
        "label": "bl-iwa-station-trays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    badgeType   :   env.get(\"BADGETYPE\")\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('traysConfig',[]);\nflow.set('badgesConfig',[]);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "1849ea2986414070",
                "4e3431c891d4c078"
            ]
        ]
    },
    {
        "id": "2545c4a66f386231",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined in",
        "links": [
            "175febc97e8ae24a"
        ],
        "x": 665,
        "y": 180,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "1a3f1121b7b0f033",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Request stations from Database",
        "func": "if (flow.get('traysConfig').length > 0) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for stations from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + 'ALL' + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + 'ALL' + '/setting/echo' })\n};\nreturn [newMsg, { topic: \"getTrayProps\", payload: true }];  \n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 140,
        "wires": [
            [
                "063def90cca3eae3",
                "8426047fc841bd8c"
            ],
            [
                "26dd391080aedecf"
            ]
        ]
    },
    {
        "id": "063def90cca3eae3",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1055,
        "y": 60,
        "wires": []
    },
    {
        "id": "26dd391080aedecf",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "175febc97e8ae24a"
            ]
        ]
    },
    {
        "id": "175febc97e8ae24a",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "2545c4a66f386231"
        ],
        "x": 1185,
        "y": 180,
        "wires": []
    },
    {
        "id": "f882c2407b2620be",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo in",
        "links": [
            "063def90cca3eae3",
            "55b54f13100eb833",
            "7c04905765b7cb23",
            "a9fa2c1738798e94"
        ],
        "x": 1595,
        "y": 240,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 200,
        "y": 420,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "admin",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "ce7c14e281a023dc"
            ],
            [
                "a9b1f3a35cafde9c"
            ],
            [
                "e560bca3296d3f84"
            ],
            [
                "24f5d970df2b1dfa"
            ],
            [
                "e9bf9b5822695ba1"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Filter MQTT",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[3];\nlet actionTopic = mqttTopic[5];\nif (trayName == 'admin')\n{\n    if (actionTopic == 'setting') actionTopic = 'admin';\n    return {topic:actionTopic, payload:msg.payload};\n}\nif (actionTopic == 'echo')\n{\n    return {topic:'echo', payload:msg.payload};\n}\nlet traysConfig = flow.get('traysConfig');\nlet trayConfig = null;\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.name == trayName)  trayConfig = traysConfig[ii];\n}\nif (trayConfig ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, trayConfig:trayConfig};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "24f5d970df2b1dfa",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Save Trays in flow",
        "func": "let tray = msg.payload;\nif (tray.name == 'admin')\n{\n    tray.reloadTrays.value = 0;\n    flow.set('adminTray', tray);\n    return {topic:'settingDone', payload:tray};\n}\nlet traysConfig = flow.get('traysConfig');\nlet blinkybusCubes = [];\nlet blinkybusSettingCubes = [];\nlet keys = Object.keys(msg.payload)\nfor (let ikey  in keys)\n{\n    if (msg.payload[keys[ikey]].hasOwnProperty('type'))\n    {\n        if (msg.payload[keys[ikey]].hasOwnProperty('blinkybus')) \n        {\n            blinkybusCubes.push(keys[ikey]);\n            if (msg.payload[keys[ikey]].action == \"setting\") \n            {\n                blinkybusSettingCubes.push(keys[ikey]);\n            }\n        }\n    }\n}\ntray.trayControl.value = 0;\nlet index = -1;\nfor (let itray in traysConfig)\n{\n    if ((traysConfig[itray].tray.type == tray.type) && (traysConfig[itray].tray.name == tray.name))\n    {\n        index = Number(itray);\n    }\n}\nif (index < 0)\n{\n    traysConfig.push({tray:tray, blinkybusCubes:blinkybusCubes, blinkybusSettingCubes:blinkybusSettingCubes, archiveTime:tray.timeStamp, cubeType:\"cube\"});\n}\nelse\n{\n    traysConfig[index] = {tray:tray, blinkybusCubes:blinkybusCubes, blinkybusSettingCubes:blinkybusSettingCubes, archiveTime:tray.timeStamp, cubeType:\"cube\"};\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 540,
        "wires": [
            [
                "f440bf4a174b2012"
            ]
        ]
    },
    {
        "id": "cffe9c2a52b1e43e",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 535,
        "y": 820,
        "wires": []
    },
    {
        "id": "0dba75772bcd5ea0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "ce5672e1f22d7692"
        ],
        "x": 535,
        "y": 860,
        "wires": []
    },
    {
        "id": "b2c154f4feeb59ad",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "98a4717e49bcd3b3"
            ]
        ]
    },
    {
        "id": "98a4717e49bcd3b3",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer),rate:500};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "e616f7335fc84c23"
            ]
        ]
    },
    {
        "id": "da3c617faa3892d7",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Readings",
        "func": "let newMsg = null;\nlet archiveMsg = null;\nlet initCubeMsg = null;\nlet badgeMsg = null;\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[1] == 'tray') return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\nlet trayName = topicSplit[3];\n\nlet traysConfig = flow.get('traysConfig');\nif (traysConfig == undefined) return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\nif (traysConfig.length < 1) return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\n\nlet badgesConfig = flow.get('badgesConfig');\nif (badgesConfig == undefined) return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\nif (badgesConfig.length < 1) return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\n\nlet trayConfig = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.name == trayName)\n    {\n        trayConfig = traysConfig[ii];\n        trayIndex = ii;\n    }\n}\nif (trayConfig ==  null) return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\ntrayConfig.cubeType = topicSplit[1];\ntrayConfig.tray.timeStamp = new Date().getTime();\nlet stateView  = new DataView(new ArrayBuffer(2));\nfor (let ib = 0; ib < 2; ++ib)   stateView.setUint8(ib, msg.payload[1 - ib]);\nlet state = stateView.getInt16(0)\nif (state == 1)\n{\n    initCubeMsg = {topic:\"initDevice\",payload:trayConfig};\n    return [newMsg,archiveMsg,initCubeMsg,badgeMsg];\n}\n\nfor (let icube = 0; icube < trayConfig.blinkybusCubes.length; ++icube)\n{\n    let cube = trayConfig.tray[trayConfig.blinkybusCubes[icube]];\n    let dataView  = new DataView(new ArrayBuffer(2));\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(cube.blinkybus.address * 2) + 1 - ib]);\n    cube.value = dataView.getInt16(0);\n    let offset = 0;\n    if (cube.blinkybus.hasOwnProperty(\"offset\")) offset = cube.blinkybus.offset;\n    cube.value = (cube.value - offset) / cube.blinkybus.scale;\n}\nif (trayConfig.tray.hasOwnProperty('lastUpdate')) trayConfig.tray.lastUpdate.value = 0;\n\ntrayConfig.tray.timeStamp = new Date().getTime();\nnewMsg = {topic:trayName, payload:trayConfig.tray};\nif (trayConfig.tray.hasOwnProperty('newData'))\n{\n    if (trayConfig.tray.newData.value > 0)\n    {\n        let dataView  = new DataView(new ArrayBuffer(4));\n        dataView.setUint16(0,trayConfig.tray.badgeEvent.value);\n        dataView.setUint16(2,trayConfig.tray.badgeSerialNo.value);\n        let event = dataView.getUint32(0);\n//        node.warn(\"badge: \" + trayConfig.tray.badgeSerialNo.value.toString() + \", event: \" + trayConfig.tray.badgeEvent.value.toString() + \", tray: \" + trayConfig.tray.serialNo.value.toString() + \", rssi: \" + trayConfig.tray.badgeRssi.value.toString());\n        badgeMsg = {topic:\"newData\", payload:JSON.parse(JSON.stringify(trayConfig.tray)), event:event, timeStamp:trayConfig.tray.timeStamp};\n        trayConfig.archiveTime = trayConfig.tray.timeStamp;\n        archiveMsg = newMsg;\n    }\n}\n\nlet archiveTimes = flow.get('archiveTimes');\nif ((trayConfig.tray.timeStamp - trayConfig.archiveTime) > trayConfig.tray.arcPeriod)\n{\n    trayConfig.archiveTime = trayConfig.tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,initCubeMsg,badgeMsg];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 860,
        "wires": [
            [
                "cffe9c2a52b1e43e"
            ],
            [
                "0dba75772bcd5ea0"
            ],
            [
                "135777d54406608e"
            ],
            [
                "e3546a22338aecd5"
            ]
        ]
    },
    {
        "id": "135777d54406608e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Init Gizmo",
        "func": "let trayConfig = msg.payload;\nlet msgs = [];\n/*\nfor (let icube = 0; icube < trayConfig.blinkybusSettingCubes.length; ++icube)\n{\n    let cube = trayConfig.tray[trayConfig.blinkybusSettingCubes[icube]];\n\n    let offset = 0;\n    if (cube.blinkybus.hasOwnProperty(\"offset\")) offset = cube.blinkybus.offset;\n    let cubeValue = Math.round(cube.value * cube.blinkybus.scale + offset);\n\n    msgs.push({\"address\":cube.blinkybus.address,\"value\":cubeValue });\n}\n*/\nmsgs.push({\"address\":0,\"value\":0});\nlet publishTopic = flow.get('trayProps').box + \"/\" + trayConfig.cubeType + \"/\" + trayConfig.tray.type + \"/\" + trayConfig.tray.name + \"/setting\";\nreturn {topic : publishTopic, payload: msgs};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 920,
        "wires": [
            [
                "b2c154f4feeb59ad"
            ]
        ]
    },
    {
        "id": "8674b6870aed740f",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1700,
        "y": 820,
        "wires": []
    },
    {
        "id": "644bd24ad5c779d2",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "deviceMQTT publish",
        "links": [
            "e616f7335fc84c23",
            "baed8fbe731e1cf0",
            "4418d23ffe13ba35"
        ],
        "x": 1515,
        "y": 820,
        "wires": [
            [
                "8674b6870aed740f"
            ]
        ]
    },
    {
        "id": "e616f7335fc84c23",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 1175,
        "y": 920,
        "wires": []
    },
    {
        "id": "d029d546e79dc7cc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 300,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "6b45b4c31fad6b8b",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Publish Tray In",
        "links": [
            "cffe9c2a52b1e43e",
            "db68a00ed2d7ce63",
            "87f76838d7e80f8d",
            "938e10b962484b58",
            "fa6fa09999cb358d",
            "7d549f9bb7ebadca",
            "aeee56bc51bac5a9",
            "f440bf4a174b2012",
            "47d2884667455c8a"
        ],
        "x": 1135,
        "y": 300,
        "wires": [
            [
                "cd5aaf29fd0c0de2"
            ]
        ]
    },
    {
        "id": "03302d45194b1091",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 360,
        "wires": [
            [
                "81a2eeceab4079a2"
            ]
        ]
    },
    {
        "id": "ce5672e1f22d7692",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Archive Tray In",
        "links": [
            "0dba75772bcd5ea0",
            "db68a00ed2d7ce63",
            "6e6e2c3ef502a90a",
            "f440bf4a174b2012"
        ],
        "x": 1135,
        "y": 360,
        "wires": [
            [
                "c0c0f2e784c5886e"
            ]
        ]
    },
    {
        "id": "81a2eeceab4079a2",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 360,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "e3bf1ffa191c317f",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\n\nlet newMsg = null;\nif (tray.hasOwnProperty('trayControl')) \n{\n    switch( tray.trayControl.value)\n    {\n        case 0:\n            newMsg = {topic: 'alarmScanCompleted', payload: tray};\n            break;\n        case -1:\n            tray.trayControl.value = 1;\n            newMsg = {topic: 'alarmScanCompleted', payload: tray};\n            break;\n        default:\n            break;\n    }\n}\nelse\n{\n    newMsg = {topic: 'alarmScanCompleted', payload: tray};\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {           \n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 300,
        "wires": [
            [
                "d029d546e79dc7cc"
            ]
        ]
    },
    {
        "id": "c0c0f2e784c5886e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "03302d45194b1091"
            ]
        ]
    },
    {
        "id": "05f1df43d04e1ad1",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1830,
        "y": 300,
        "wires": []
    },
    {
        "id": "db68a00ed2d7ce63",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b",
            "ce5672e1f22d7692"
        ],
        "x": 1045,
        "y": 340,
        "wires": []
    },
    {
        "id": "baed8fbe731e1cf0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 1045,
        "y": 300,
        "wires": []
    },
    {
        "id": "ce7c14e281a023dc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Setting",
        "func": "let tray = msg.trayConfig.tray;\nif (tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (tray[msg.payload.cube].enabled == 0)\n    {\n        return [null, null, null];\n    }\n}\nlet mqttMsg = null;\nlet normalSettingMsg = {topic:'settingDone', payload:tray};\nlet trayControlMessage = null;\nlet trayProps  = flow.get('trayProps');\n\nlet icube = msg.trayConfig.blinkybusSettingCubes.indexOf(msg.payload.cube);\nlet bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\n\nif (icube >= 0)\n{\n    let cube = msg.trayConfig.tray[msg.payload.cube];\n    cube.value = msg.payload.value;\n    settingsView.setUint8(0, 1); //setting\n    settingsView.setUint8(1, cube.blinkybus.address); //address\n\n    let offset = 0;\n    if (cube.blinkybus.hasOwnProperty(\"offset\")) offset = cube.blinkybus.offset;\n\n    settingsView.setInt16(2, Math.round(cube.value * cube.blinkybus.scale + offset), true); //value\n    mqttMsg = {topic: trayProps.box + \"/\" + msg.trayConfig.cubeType + \"/\" + tray.type + \"/\" + tray.name + \"/setting\", payload:Buffer.from(buffer)};\n}\nelse\n{\n    switch (msg.payload.cube) \n    {\n        case 'xpos':\n            tray[msg.payload.cube].value = msg.payload.value;\n        break;\n        case 'ypos':\n            tray[msg.payload.cube].value = msg.payload.value;\n        break;\n        case 'zpos':\n            tray[msg.payload.cube].value = msg.payload.value;\n        break;\n        case 'msgId':\n            tray[msg.payload.cube].value = msg.payload.value;\n        break;\n        case 'warningMsg':\n            tray[msg.payload.cube].value = msg.payload.value;\n        break;\n        case 'authorizeBadge':\n            tray[msg.payload.cube].value = msg.payload.value;\n            tray.authorizeBadgeField.value = 0;\n            tray.authorizeBadgeField.value = tray.authorizeBadgeField.value + (tray.msgId.value << 12);\n            tray.authorizeBadgeField.value = tray.authorizeBadgeField.value  + msg.payload.value;            \n            settingsView.setUint8(0, 1); //setting\n            settingsView.setUint8(1, tray.authorizeBadgeField.blinkybus.address); //address\n            settingsView.setInt16(2, tray.authorizeBadgeField.value, true); //value\n            mqttMsg = {topic: trayProps.box + \"/\" + msg.trayConfig.cubeType + \"/\" + tray.type + \"/\" + tray.name + \"/setting\", payload:Buffer.from(buffer)};\n        break;\n        case 'warnBadge':\n            tray[msg.payload.cube].value = msg.payload.value;\n            tray.sendWarningField.value = 0;\n            tray.sendWarningField.value = tray.sendWarningField.value + (tray.msgId.value << 12);\n            tray.sendWarningField.value = tray.sendWarningField.value + (tray.warningMsg.value << 8);\n            tray.sendWarningField.value = tray.sendWarningField.value  + msg.payload.value;            \n            settingsView.setUint8(0, 1); //setting\n            settingsView.setUint8(1, tray.sendWarningField.blinkybus.address); //address\n            settingsView.setInt16(2, tray.sendWarningField.value, true); //value\n            mqttMsg = {topic: trayProps.box + \"/\" + msg.trayConfig.cubeType + \"/\" + tray.type + \"/\" + tray.name + \"/setting\", payload:Buffer.from(buffer)};\n       break;\n        case 'alias':\n            tray.alias.value = msg.payload.value;\n        break;\n        case 'trayControl':\n            switch(msg.payload.value)\n            {\n                case 0:\n                    tray.trayControl.value = 0;\n                    break;\n                case 1:\n                    tray.trayControl.value = -1;\n                    break;\n                case 2:\n                    if (tray.trayControl.value > 0)\n                    {\n                        tray.trayControl.value = 2;\n                        trayControlMessage =\n                        {\n                            topic: trayProps.box + '/tray/' + tray.type + '/' + tray.name + '/echo',\n                            payload: JSON.stringify({ topic: trayProps.box + '/tray/' + tray.type + '/' + tray.name + '/setting/echo' })\n                        };\n                    }\n                    break;\n                default:\n                    tray.trayControl.value = 0;\n                    break;\n             }\n        break;\n        default:\n            break;\n    }\n}\nreturn [mqttMsg, normalSettingMsg, trayControlMessage];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            [
                "baed8fbe731e1cf0"
            ],
            [
                "db68a00ed2d7ce63"
            ],
            [
                "55b54f13100eb833"
            ]
        ]
    },
    {
        "id": "e560bca3296d3f84",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Set Alarm Block",
        "func": "if (msg.trayConfig.tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (msg.payload.hasOwnProperty('enabled'))\n    {\n        msg.trayConfig.tray[msg.payload.cube].enabled = msg.payload.enabled;\n    }\n}\nlet cubeAlarm = msg.trayConfig.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nreturn {topic:'trayConfigCompleted', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "938e10b962484b58"
            ]
        ]
    },
    {
        "id": "a9b1f3a35cafde9c",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "87f76838d7e80f8d"
            ]
        ]
    },
    {
        "id": "87f76838d7e80f8d",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1045,
        "y": 420,
        "wires": []
    },
    {
        "id": "938e10b962484b58",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Continue Devie Readings out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1045,
        "y": 480,
        "wires": []
    },
    {
        "id": "e6b2a65ac7c0f8e7",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "a2b6f8c1cd78afa6"
        ],
        "x": 1195,
        "y": 720,
        "wires": []
    },
    {
        "id": "a2b6f8c1cd78afa6",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "reload trays in",
        "links": [
            "e6b2a65ac7c0f8e7"
        ],
        "x": 225,
        "y": 180,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Cube MQTT Reading topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/+/\" + flow.get('trayProps').type + \"/+/reading\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            [
                "947b3065ee2175f6"
            ]
        ]
    },
    {
        "id": "947b3065ee2175f6",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Cube MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 210,
        "y": 860,
        "wires": [
            [
                "da3c617faa3892d7"
            ]
        ]
    },
    {
        "id": "83a5bccd57b9c2a0",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT Reading topic in",
        "links": [
            "1849ea2986414070"
        ],
        "x": 105,
        "y": 780,
        "wires": [
            [
                "a1ac9e631b1c38ed"
            ]
        ]
    },
    {
        "id": "1849ea2986414070",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables out",
        "mode": "link",
        "links": [
            "83a5bccd57b9c2a0",
            "47672c22a2d3c5cc",
            "19b7c2a0932ad7cf"
        ],
        "x": 445,
        "y": 180,
        "wires": []
    },
    {
        "id": "55b54f13100eb833",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "reload tray out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1045,
        "y": 380,
        "wires": []
    },
    {
        "id": "fbbf0c53817cba2e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +\"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "5023092b.a0fe38"
            ]
        ]
    },
    {
        "id": "cd5aaf29fd0c0de2",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Permit Check",
        "func": "let tray = msg.payload;\nif (tray.hasOwnProperty('permit')) tray.permit.value = 1;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nif (tray.hasOwnProperty('permit'))\n{\n    tray.permit.value = 1;\n    if (alarmFlagReading || alarmFlagSetting) tray.permit.value = 0;\n}\n\nreturn msg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value > 2) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "e3bf1ffa191c317f"
            ]
        ]
    },
    {
        "id": "47672c22a2d3c5cc",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe trays in",
        "links": [
            "1849ea2986414070"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "fbbf0c53817cba2e"
            ]
        ]
    },
    {
        "id": "e34687eba3651fd3",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe Badges",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "089d455e88eb4e6a"
            ]
        ]
    },
    {
        "id": "089d455e88eb4e6a",
        "type": "json",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 760,
        "y": 1200,
        "wires": [
            [
                "935b790bba427d8c"
            ]
        ]
    },
    {
        "id": "d5c40e12c7e96a2c",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Save badges in flow",
        "func": "let tray = msg.payload;\nlet badgesConfig = flow.get('badgesConfig');\nlet index = -1;\nfor (let ibadge in badgesConfig)\n{\n    if ((badgesConfig[ibadge].tray.type == tray.type) && (badgesConfig[ibadge].tray.name == tray.name))\n    {\n        index = Number(ibadge);\n    }\n}\nif (index < 0)\n{\n    badgesConfig.push({tray:tray, archiveTime:tray.timeStamp});\n}\nelse\n{\n    badgesConfig[index] = {tray:tray, archiveTime:tray.timeStamp};\n}\nreturn null;\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1240,
        "wires": []
    },
    {
        "id": "40868ab74c937cc2",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Badges subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').badgeType +\"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1200,
        "wires": [
            [
                "e34687eba3651fd3"
            ]
        ]
    },
    {
        "id": "19b7c2a0932ad7cf",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe badges in",
        "links": [
            "1849ea2986414070"
        ],
        "x": 195,
        "y": 1200,
        "wires": [
            [
                "40868ab74c937cc2"
            ]
        ]
    },
    {
        "id": "7d06c38d81c6c16e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Request badges from Database",
        "func": "if (flow.get('badgesConfig').length > 0) return null;\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for badges from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.badgeType + '/' + 'ALL' + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.badgeType + '/' + 'ALL' + '/setting/echo' })\n};\nreturn newMsg;  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "063def90cca3eae3"
            ]
        ]
    },
    {
        "id": "8426047fc841bd8c",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "7d06c38d81c6c16e"
            ]
        ]
    },
    {
        "id": "4e3431c891d4c078",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "e3546a22338aecd5",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Coalesce station reports",
        "func": "let events = context.get(\"events\");\nif (msg.topic == \"newData\")\n{\n    let eventIndex = -1\n    for (let ievent in events)\n    {\n        if (events[ievent].event == msg.event)\n        {\n            eventIndex = Number(ievent);\n            break;\n        }\n    }\n    if (eventIndex < 0)\n    {\n        let newEvent = {event:msg.event, timeStamp:msg.timeStamp,stations:[]};\n        newEvent.stations.push(msg.payload);\n        events.push(newEvent);\n    }\n    else\n    {\n        events[eventIndex].stations.push(msg.payload);\n    }\n    return null;\n}\nif (msg.topic == \"cleanup\")\n{\n    let oldbadges = [];\n    for (let ievent in events)\n    {\n        if ((msg.payload - events[ievent].timeStamp) > 1000)\n        {\n            let badgesConfig = flow.get('badgesConfig');\n            let index = -1;\n            for (let ibadge in badgesConfig)\n            {\n                if (badgesConfig[ibadge].tray.serialNo.value == events[ievent].stations[0].badgeSerialNo.value)\n                {\n                    index = Number(ibadge);\n                }\n            }\n            if (index>= 0)\n            {\n                badgesConfig[index].tray.vbat.value   = events[ievent].stations[0].badgeVbat.value;\n                badgesConfig[index].tray.vusb.value   = events[ievent].stations[0].badgeVusb.value;\n                badgesConfig[index].tray.event.value  = events[ievent].stations[0].badgeEvent.value;\n                badgesConfig[index].tray.button.value = events[ievent].stations[0].badgebutton.value;\n                badgesConfig[index].tray.move.value   = events[ievent].stations[0].badgeMove.value;\n                badgesConfig[index].tray.charge.value = events[ievent].stations[0].badgeCharge.value;\n                badgesConfig[index].tray.auth.value   = events[ievent].stations[0].badgeAuth.value;\n\n                badgesConfig[index].tray.notify.value = 0;\n                if (badgesConfig[index].tray.button.value > 0) badgesConfig[index].tray.notify.value = 1;\n                if (badgesConfig[index].tray.move.value   > 0) badgesConfig[index].tray.notify.value = 1;\n                if ((badgesConfig[index].tray.charge.value == 0) && (badgesConfig[index].tray.auth.value == 0))\n                {\n                    badgesConfig[index].tray.notify.value = 1;\n                }\n\n                if (badgesConfig[index].tray.auth.value == 0) badgesConfig[index].tray.user.value = \"none\";\n                badgesConfig[index].tray.lastUpdate.value = 0.0;\n                badgesConfig[index].tray.timeStamp = events[ievent].stations[0].timeStamp;\n\n                events[ievent].stations.sort((a, b) => b.badgeRssi.value - a.badgeRssi.value);\n                \n                badgesConfig[index].tray.rssi.value = [[],[]];\n                badgesConfig[index].tray.stations.value = [];\n                for (let istation in events[ievent].stations)\n                {\n                    badgesConfig[index].tray.rssi.value[0].push(events[ievent].stations[istation].serialNo.value);\n                    badgesConfig[index].tray.rssi.value[1].push(events[ievent].stations[istation].badgeRssi.value);\n                    let stationInfo = {};\n                    stationInfo['serialNo'] = events[ievent].stations[istation].serialNo.value;\n                    stationInfo['rssi']     = events[ievent].stations[istation].badgeRssi.value;\n                    stationInfo['xpos']     = events[ievent].stations[istation].xpos.value;\n                    stationInfo['ypos']     = events[ievent].stations[istation].ypos.value;\n                    stationInfo['zpos']     = events[ievent].stations[istation].zpos.value;\n                    badgesConfig[index].tray.stations.value.push(stationInfo);\n                }\n                triangulate(badgesConfig[index].tray,  events[ievent].stations);\n                oldbadges.push(JSON.parse(JSON.stringify(badgesConfig[index].tray)));\n            }\n            events.splice(Number(ievent),1);\n        }\n    }\n    if (oldbadges.length > 0) \n    {\n        let adminTray = flow.get('adminTray');\n        let badgesConfig = flow.get('badgesConfig');\n        let badgeSummaries = [];\n        for (let ibadge in badgesConfig)\n        {\n            let btray = badgesConfig[ibadge].tray\n            let statusCode = 0;\n            if (btray.button.value     > 0) statusCode = statusCode + 1;\n            if (btray.move.value       > 0) statusCode = statusCode + 2;\n            if (btray.charge.value     > 0) statusCode = statusCode + 4;\n            if (btray.auth.value       > 0) statusCode = statusCode + 8;\n            if (btray.lastUpdate.value > 0) statusCode = statusCode + 16;\n            let badgeSummary = \n            {   \n                serialNo    : btray.serialNo.value, \n                xpos        : btray.xpos.value,\n                ypos        : btray.ypos.value,\n                zpos        : btray.zpos.value,\n                statusCode  : statusCode,\n                user        : btray.user.value\n            };\n            badgeSummaries.push(badgeSummary);\n        }\n        adminTray.timeStamp = new Date().getTime();\n        adminTray.badgeSummary.value = JSON.parse(JSON.stringify(badgeSummaries));\n        oldbadges.push(JSON.parse(JSON.stringify(adminTray)));\n        return {topic:\"newData\", payload:oldbadges};\n    }\n}\nreturn null;\nfunction triangulate(badge, stations)\n{\n    if (stations.length == 1)\n    {\n        badge.xpos.value = stations[0].xpos.value;\n        badge.ypos.value = stations[0].ypos.value;\n        badge.zpos.value = 0.0;\n        return;\n    }\n    if (stations.length == 2)\n    {\n        let powerCircle = getPowerCircle(stations[0], stations[1])\n        badge.xpos.value = Math.round(1000 * powerCircle.xbisect) / 1000;\n        badge.ypos.value = Math.round(1000 * powerCircle.ybisect) / 1000;\n        badge.zpos.value = 0.0;\n        return;\n    }\n    if (stations.length >= 3)\n    {\n        let powerCircle = getPowerCircle(stations[0], stations[1]);\n\n        let d1cx = stations[1].xpos.value - powerCircle.xcircle;\n        let d1cy = stations[1].ypos.value - powerCircle.ycircle;\n        let d2cx = stations[2].xpos.value - powerCircle.xcircle;\n        let d2cy = stations[2].ypos.value - powerCircle.ycircle;\n        let theta1 = Math.atan2(d1cy, d1cx);\n        let theta2 = Math.atan2(d2cy, d2cx);\n        let dtheta = theta2 - theta1;\n        let powerRatio = stations[2].badgeRssi.value - stations[1].badgeRssi.value;\n        powerRatio = Math.pow(10,powerRatio / 20);\n        dtheta = dtheta * powerRatio / 2.0;\n        dtheta = dtheta + theta1;\n        badge.xpos.value = powerCircle.rcircle * Math.cos(dtheta) + powerCircle.xcircle\n        badge.ypos.value = powerCircle.rcircle * Math.sin(dtheta) + powerCircle.ycircle\n        badge.xpos.value = Math.round(1000 * badge.xpos.value) / 1000;\n        badge.ypos.value = Math.round(1000 * badge.ypos.value) / 1000;\n        badge.zpos.value = 0.0;\n        return;\n    }\n\n}\nfunction distanceBetweenStations(stationA, stationB)\n{\n    let dx = stationA.xpos.value - stationB.xpos.value;\n    let dy = stationA.ypos.value - stationB.ypos.value;\n    return Math.sqrt((dx * dx) + (dy * dy));\n}\nfunction getPowerCircle(stationA, stationB)\n{\n        if (stationA.badgeRssi.value == stationB.badgeRssi.value) stationB.badgeRssi.value = stationB.badgeRssi.value - 0.1;\n        let powerRatio = stationA.badgeRssi.value - stationB.badgeRssi.value;\n        powerRatio = Math.pow(10,powerRatio / 20);\n        let deltaStation  = distanceBetweenStations(stationA, stationB);\n        let xpcircleCenter= -deltaStation / (powerRatio * powerRatio - -1);\n        let rcircle = Math.sqrt(xpcircleCenter * (xpcircleCenter - deltaStation));\n        let theta = Math.atan2(stationB.ypos.value - stationA.ypos.value, stationB.xpos.value - stationA.xpos.value);\n        let xc = xpcircleCenter * Math.cos(theta) + stationA.xpos.value;\n        let yc = xpcircleCenter * Math.sin(theta) + stationA.ypos.value;\n        let xcross = xpcircleCenter + rcircle;\n        let xbisect = xcross * Math.cos(theta) + stationA.xpos.value\n        let ybisect = xcross * Math.sin(theta) + stationA.ypos.value\n        return {rcircle:rcircle, xcircle:xc, ycircle:yc, xbisect:xbisect, ybisect:ybisect, theta:theta};\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"events\", []);",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 980,
        "wires": [
            [
                "cd511304c39666a6"
            ]
        ]
    },
    {
        "id": "317b494f3aab2fed",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "Cleanup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "cleanup",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 980,
        "wires": [
            [
                "e3546a22338aecd5"
            ]
        ]
    },
    {
        "id": "cd511304c39666a6",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 980,
        "wires": [
            [
                "6e6e2c3ef502a90a",
                "aeee56bc51bac5a9",
                "fabba2e0715f2088"
            ]
        ]
    },
    {
        "id": "935b790bba427d8c",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Filter MQTT",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[3];\nlet actionTopic = mqttTopic[5];\nif (actionTopic == 'echo')\n{\n    return {topic:'echo', payload:msg.payload};\n}\nlet badgesConfig = flow.get('badgesConfig')\nlet badgeConfig = null;\nfor (let ii = 0; ii < badgesConfig.length; ++ii)\n{\n    if (badgesConfig[ii].tray.name == trayName)  badgeConfig = badgesConfig[ii];\n}\nif (badgeConfig ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, trayConfig:badgeConfig};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "be4a8da31d71cd21"
            ]
        ]
    },
    {
        "id": "be4a8da31d71cd21",
        "type": "switch",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1060,
        "y": 1200,
        "wires": [
            [
                "db28bda1511e9b46"
            ],
            [
                "f2a759f9acd3fd32"
            ],
            [
                "d5c40e12c7e96a2c"
            ],
            [
                "27e29d2f19b534c3"
            ]
        ]
    },
    {
        "id": "db28bda1511e9b46",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1160,
        "wires": [
            [
                "aeee56bc51bac5a9"
            ]
        ]
    },
    {
        "id": "f2a759f9acd3fd32",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.trayConfig.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nreturn {topic:'trayConfigCompleted', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1200,
        "wires": [
            [
                "aeee56bc51bac5a9"
            ]
        ]
    },
    {
        "id": "aeee56bc51bac5a9",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Badge Ping Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1385,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6e6e2c3ef502a90a",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Badge Archive out",
        "mode": "link",
        "links": [
            "ce5672e1f22d7692"
        ],
        "x": 1285,
        "y": 980,
        "wires": []
    },
    {
        "id": "ee72b88e7a33bf0f",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "Every 2 Minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1320,
        "wires": [
            [
                "8ed7b16c7cf23baa"
            ]
        ]
    },
    {
        "id": "8ed7b16c7cf23baa",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Check for stale trays",
        "func": "let traysConfig = flow.get('traysConfig');\nlet now = new Date().getTime();\nlet staleTrays = [];\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.hasOwnProperty('lastUpdate'))\n    {\n        let milli = now - traysConfig[ii].tray.timeStamp;\n        traysConfig[ii].tray.lastUpdate.value = Math.round(milli / 3600) / 1000;\n        if (milli > traysConfig[ii].tray.arcPeriod)\n        {\n            staleTrays.push(traysConfig[ii].tray);\n        }\n    }\n}\nif (staleTrays.length < 1) return null;\nreturn {topic: 'staleTrays',payload:staleTrays};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "b8cff6830921f2a3"
            ]
        ]
    },
    {
        "id": "b8cff6830921f2a3",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "fa6fa09999cb358d"
            ]
        ]
    },
    {
        "id": "fa6fa09999cb358d",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Stale Tray out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 835,
        "y": 1320,
        "wires": []
    },
    {
        "id": "2504a3f4988d323f",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "Every 30 seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1380,
        "wires": [
            [
                "90fe9a52761c09b7"
            ]
        ]
    },
    {
        "id": "90fe9a52761c09b7",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Check for stale badges",
        "func": "let badgesConfig = flow.get('badgesConfig');\nlet now = new Date().getTime();\nlet staleBadges = [];\nfor (let ii = 0; ii < badgesConfig.length; ++ii)\n{\n    if (badgesConfig[ii].tray.hasOwnProperty('lastUpdate'))\n    {\n        let milli = now - badgesConfig[ii].tray.timeStamp;\n        \n        if (milli > badgesConfig[ii].tray.arcPeriod)\n        {\n            badgesConfig[ii].tray.lastUpdate.value = Math.round(milli / 3600) / 1000;\n            badgesConfig[ii].tray.notify.value = 1;\n            staleBadges.push(badgesConfig[ii].tray);\n        }\n    }\n}\nif (staleBadges.length < 1) return null;\nlet adminTray = flow.get('adminTray');\nlet badgeSummaries = [];\nfor (let ibadge in badgesConfig)\n{\n    let btray = badgesConfig[ibadge].tray\n    let statusCode = 0;\n    if (btray.button.value     > 0) statusCode = statusCode + 1;\n    if (btray.move.value       > 0) statusCode = statusCode + 2;\n    if (btray.charge.value     > 0) statusCode = statusCode + 4;\n    if (btray.auth.value       > 0) statusCode = statusCode + 8;\n    if (btray.lastUpdate.value > 0) statusCode = statusCode + 16;\n\n    let badgeSummary = \n    {   \n        serialNo    : btray.serialNo.value, \n        xpos        : btray.xpos.value,\n        ypos        : btray.ypos.value,\n        zpos        : btray.zpos.value,\n        statusCode  : statusCode,\n        user        : btray.user.value\n    };\n    badgeSummaries.push(badgeSummary);\n}\nadminTray.timeStamp = new Date().getTime();\nadminTray.badgeSummary.value = JSON.parse(JSON.stringify(badgeSummaries));\nstaleBadges.push(adminTray);\n\nreturn {topic: 'staleBadges',payload:staleBadges};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1380,
        "wires": [
            [
                "21dcf8310fafea73"
            ]
        ]
    },
    {
        "id": "21dcf8310fafea73",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 720,
        "y": 1380,
        "wires": [
            [
                "7d549f9bb7ebadca"
            ]
        ]
    },
    {
        "id": "7d549f9bb7ebadca",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Stale Badge out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b",
            "8c3a8a2ad2d24b5c"
        ],
        "x": 835,
        "y": 1380,
        "wires": []
    },
    {
        "id": "e9bf9b5822695ba1",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "admin settings",
        "func": "let adminTray = flow.get('adminTray');\nlet normalSettingMsg = {topic:'settingDone', payload:adminTray};\nlet initTraysMsg = null;\nlet batchTrayMsg = null;\nlet batchMqttMsg = null;\nlet msgId = context.get('msgId');\nlet traysConfig = flow.get('traysConfig');\nlet trayProps  = flow.get('trayProps');\nlet trays = [];\nlet mqttMsgs = [];\n\nlet bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\n\nswitch (msg.payload.cube)\n{\n    case \"reloadTrays\":\n        adminTray[msg.payload.cube].value = msg.payload.value;\n        if (msg.payload.value == 1) initTraysMsg = {topic:'initFlow', payload: new Date().getTime()};\n        return [normalSettingMsg, batchTrayMsg, batchMqttMsg, initTraysMsg];\n        break;\n    case \"authorizeBadge\":\n        adminTray.authorizeBadge.value = msg.payload.value;\n        msgId = msgId + 1;\n        if (msgId > 15) msgId = 1;\n        context.set('msgId',msgId);\n        for (let itray in traysConfig) \n        {\n            traysConfig[itray].tray.authorizeBadge.value = msg.payload.value;\n            traysConfig[itray].tray.msgId.value = msgId;\n            traysConfig[itray].tray.authorizeBadgeField.value = 0;\n            traysConfig[itray].tray.authorizeBadgeField.value = traysConfig[itray].tray.authorizeBadgeField.value + (traysConfig[itray].tray.msgId.value << 12);\n            traysConfig[itray].tray.authorizeBadgeField.value = traysConfig[itray].tray.authorizeBadgeField.value  + traysConfig[itray].tray.authorizeBadge.value;            \n            settingsView.setUint8(0, 1); //setting\n            settingsView.setUint8(1, traysConfig[itray].tray.authorizeBadgeField.blinkybus.address); //address\n            settingsView.setInt16(2, traysConfig[itray].tray.authorizeBadgeField.value, true); //value\n            mqttMsgs.push({topic: trayProps.box + \"/\" + traysConfig[itray].cubeType + \"/\" + traysConfig[itray].tray.type + \"/\" + traysConfig[itray].tray.name + \"/setting\", payload:Buffer.from(buffer)});\n            trays.push(traysConfig[itray].tray);\n        }\n        batchTrayMsg = {topic: \"setAuthorizeBadgeAllTrays\", payload:trays, rate:100};\n        batchMqttMsg = {topic: \"setAuthorizeBadgeAllTrays\", payload:mqttMsgs, rate:500};\n        return [normalSettingMsg, batchTrayMsg, batchMqttMsg, initTraysMsg];\n        break;\n    case \"warnBadge\":\n        adminTray.warnBadge.value = msg.payload.value;\n        msgId = msgId + 1;\n        if (msgId > 15) msgId = 1;\n        context.set('msgId',msgId);\n        for (let itray in traysConfig) \n        {\n            traysConfig[itray].tray.warnBadge.value = msg.payload.value;\n            traysConfig[itray].tray.msgId.value = msgId;\n            traysConfig[itray].tray.sendWarningField.value = 0;\n            traysConfig[itray].tray.sendWarningField.value = traysConfig[itray].tray.sendWarningField.value + (traysConfig[itray].tray.warningMsg.value << 8);\n            traysConfig[itray].tray.sendWarningField.value = traysConfig[itray].tray.sendWarningField.value + (traysConfig[itray].tray.msgId.value << 12);\n            traysConfig[itray].tray.sendWarningField.value = traysConfig[itray].tray.sendWarningField.value  + traysConfig[itray].tray.warnBadge.value;            \n            settingsView.setUint8(0, 1); //setting\n            settingsView.setUint8(1, traysConfig[itray].tray.sendWarningField.blinkybus.address); //address\n            settingsView.setInt16(2, traysConfig[itray].tray.sendWarningField.value, true); //value\n            mqttMsgs.push({topic: trayProps.box + \"/\" + traysConfig[itray].cubeType + \"/\" + traysConfig[itray].tray.type + \"/\" + traysConfig[itray].tray.name + \"/setting\", payload:Buffer.from(buffer)});\n            trays.push(traysConfig[itray].tray);\n        }\n        batchTrayMsg = {topic: \"setWarnBadgeAllTrays\", payload:trays, rate:100};\n        batchMqttMsg = {topic: \"setWarnBadgeAllTrays\", payload:mqttMsgs, rate:500};\n        return [normalSettingMsg, batchTrayMsg, batchMqttMsg, initTraysMsg];\n        break;\n    case \"warningMsg\":\n        adminTray[msg.payload.cube].value = msg.payload.value;\n        for (let itray in traysConfig) \n        {\n            traysConfig[itray].tray.warningMsg.value = msg.payload.value;\n            trays.push(traysConfig[itray].tray);\n        }\n        batchTrayMsg = {topic: \"setWarningMsgAllTrays\", payload:trays, rate:100};\n        return [normalSettingMsg, batchTrayMsg, batchMqttMsg, initTraysMsg];\n        break;\n    default:\n        break;\n}\n\nreturn [normalSettingMsg, batchTrayMsg, batchMqttMsg, initTraysMsg];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('msgId',0);",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 620,
        "wires": [
            [
                "f440bf4a174b2012"
            ],
            [
                "7fcf3754b2f11d9f"
            ],
            [
                "2627dbdc22bdcce7"
            ],
            [
                "13be2bcbf639cc93"
            ]
        ]
    },
    {
        "id": "f440bf4a174b2012",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "echo admin setting",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b",
            "ce5672e1f22d7692"
        ],
        "x": 1385,
        "y": 520,
        "wires": []
    },
    {
        "id": "13be2bcbf639cc93",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 720,
        "wires": [
            [
                "e6b2a65ac7c0f8e7"
            ]
        ]
    },
    {
        "id": "7fcf3754b2f11d9f",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "715986948f8c3228"
            ]
        ]
    },
    {
        "id": "2627dbdc22bdcce7",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "13a9af134647f18a"
            ]
        ]
    },
    {
        "id": "4418d23ffe13ba35",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "batchMqtt out",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 1495,
        "y": 660,
        "wires": []
    },
    {
        "id": "13a9af134647f18a",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "shift Up",
        "func": "return msg.payload;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 660,
        "wires": [
            [
                "ccc4cfd8f2db0381"
            ]
        ]
    },
    {
        "id": "715986948f8c3228",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1250,
        "y": 600,
        "wires": [
            [
                "f440bf4a174b2012"
            ]
        ]
    },
    {
        "id": "ccc4cfd8f2db0381",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1390,
        "y": 660,
        "wires": [
            [
                "4418d23ffe13ba35"
            ]
        ]
    },
    {
        "id": "27e29d2f19b534c3",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "create setting",
        "func": "switch (msg.payload.cube)\n{\n    case 'user':\n        msg.trayConfig.tray.user.value = msg.payload.value;\n        return {topic:'badgeSetting', payload:msg.trayConfig.tray};\n        break;\n    default:\n        break;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1300,
        "wires": [
            [
                "aeee56bc51bac5a9"
            ]
        ]
    },
    {
        "id": "fabba2e0715f2088",
        "type": "switch",
        "z": "35ebad916f0a27ed",
        "name": "Filter on badge",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$(BADGETYPE)",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 1040,
        "wires": [
            [
                "b0dea0845c5deb2b"
            ]
        ]
    },
    {
        "id": "b0dea0845c5deb2b",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "ntfy msgs",
        "func": "let badgeHistory = context.get(\"badgeHistory\");\nlet btray = msg.payload\nlet index = -1;\nfor (let ibadge in badgeHistory)\n{\n    if (badgeHistory[ibadge].serialNo.value == btray.serialNo.value) index = Number(ibadge);\n}\nlet sendNotification = false\nif (btray.notify.value > 0)\n{\n    if (index < 0)\n    {\n        sendNotification = true;\n        \n    }\n    else\n    {\n        let newStatusCode = getStatusCode(btray);\n        let oldStatusCode = getStatusCode(badgeHistory[index]);\n        if (newStatusCode != oldStatusCode) sendNotification = true;\n    }\n}\nif (index < 0)\n{\n    badgeHistory.push(JSON.parse(JSON.stringify(btray)));\n}\nelse\n{\n    badgeHistory[index] = JSON.parse(JSON.stringify(btray));\n}\nif (!sendNotification) return null;\n\nlet message = \"\";\n\nif ((btray.charge.value == 0) && (btray.auth.value == 0))\n{\n    message = \"Unauthorized access with  Badge \" + btray.serialNo.value.toString();\n}\nif (btray.button.value > 0) \n{\n    message = \"Assistance requested by user \" + btray.user.value + \" with  Badge \" + btray.serialNo.value.toString();\n}\nif (btray.move.value > 0)   \n{\n    message = \"No motion detected from user \" + btray.user.value + \" with  Badge \" + btray.serialNo.value.toString();\n}\nif (btray.lastUpdate.value > 0) \n{\n    message = \"No update from user \" + btray.user.value + \" with  Badge \" + btray.serialNo.value.toString();\n}\n\nlet msgs = [];\nlet url = \"http://\" + env.get(\"NTFYIP\") + \"/all\"\nlet rateLimit = 200;\nmsgs.push({topic:\"all\",url:url, payload:message,rate:rateLimit});\nurl = \"http://\" + env.get(\"NTFYIP\") + \"/iwa\";\nmsgs.push({topic:\"iwa\",url:url, payload:message,rate:rateLimit});\nreturn {topic:\"ntfy\",payload:msgs};\nfunction getStatusCode(tray)\n{\n    let statusCode = 0;\n    if (tray.button.value     > 0) statusCode = statusCode + 1;\n    if (tray.move.value       > 0) statusCode = statusCode + 2;\n    if (tray.charge.value     > 0) statusCode = statusCode + 4;\n    if (tray.auth.value       > 0) statusCode = statusCode + 8;\n    if (tray.lastUpdate.value > 0) statusCode = statusCode + 16;\n    return statusCode;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "context.set(\"badgeHistory\",[])",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1040,
        "wires": [
            [
                "359453b09345d1e0"
            ]
        ]
    },
    {
        "id": "82c50073c6c82ff2",
        "type": "http request",
        "z": "35ebad916f0a27ed",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 2030,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b5a389edf4606447",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "promote",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "58e7330582ef318a"
            ]
        ]
    },
    {
        "id": "58e7330582ef318a",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1870,
        "y": 1040,
        "wires": [
            [
                "82c50073c6c82ff2"
            ]
        ]
    },
    {
        "id": "359453b09345d1e0",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1590,
        "y": 1040,
        "wires": [
            [
                "b5a389edf4606447"
            ]
        ]
    },
    {
        "id": "8c3a8a2ad2d24b5c",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Stale badges to ntfy",
        "links": [
            "7d549f9bb7ebadca"
        ],
        "x": 1035,
        "y": 1040,
        "wires": [
            [
                "fabba2e0715f2088"
            ]
        ]
    }
]