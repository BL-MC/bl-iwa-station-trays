[
    {
        "id": "e1a1e83b4bc1e188",
        "type": "tab",
        "label": "blinky-picoW-demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cbfba956c59a29f1",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "label": true,
            "color": "#ffffff",
            "fill": "#487895",
            "stroke": "#000000"
        },
        "nodes": [
            "d1b4e4f77e6221a3"
        ],
        "x": 54,
        "y": 39,
        "w": 232,
        "h": 82
    },
    {
        "id": "e6eae5c8a21d720d",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "c3b1f5e107f72224"
        ],
        "x": 774,
        "y": 139,
        "w": 212,
        "h": 82
    },
    {
        "id": "ef5cb8e350f51d8c",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "stroke": "#000000",
            "color": "#ffffff"
        },
        "nodes": [
            "7ff1e43e3c9dd7c7"
        ],
        "x": 754,
        "y": 451.5,
        "w": 232,
        "h": 97
    },
    {
        "id": "40e56362c23599cc",
        "type": "group",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "style": {
            "fill": "#487895",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#000000"
        },
        "nodes": [
            "5e7d2de841bcb0c1"
        ],
        "x": 1034,
        "y": 519,
        "w": 172,
        "h": 82
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9cd5ff5e.caf86",
        "type": "mongodb3",
        "uri": "$(MONGODBIP)",
        "name": "blinky-lite",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "a5bd4c3bb16034db",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Prepare DB Query",
        "func": "flow.set(\"trayType\", msg.payload.trayType);\nflow.set(\"mqttReadBufferSize\", msg.payload.mqttReadBufferSize);\nreturn {topic: msg.payload.trayType,payload:[{type:msg.payload.trayType}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "2ca2090ca4fae13a"
            ]
        ]
    },
    {
        "id": "2ca2090ca4fae13a",
        "type": "mongodb3 in",
        "z": "e1a1e83b4bc1e188",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "Find Trays",
        "collection": "trays",
        "operation": "find.toArray",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "ec8658b58562541a"
            ]
        ]
    },
    {
        "id": "ec8658b58562541a",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Save Trays in flow",
        "func": "let numTrays = objectLength(msg.payload);\nif (numTrays < 1) return null;\nlet trays = [];\nlet archiveTimes = [];\nfor (let ii = 0; ii < numTrays; ++ii)\n{\n    trays[ii] = JSON.parse(JSON.stringify(msg.payload[ii])); \n    delete trays[ii][\"_id\"];\n    archiveTimes[ii] = trays[ii].timeStamp;\n}\nflow.set('trays',trays);\nflow.set('archiveTimes',archiveTimes);\nreturn {topic:'traysRead',payload:true};\n\nfunction objectLength( object ) \n{\n    var length = 0;\n    for( var key in object ) \n    {\n        if( object.hasOwnProperty(key) ) \n        {\n            ++length;\n        }\n    }\n    return length;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "0f5c6efc42e17a0d"
            ]
        ]
    },
    {
        "id": "0f5c6efc42e17a0d",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Tray init out",
        "mode": "link",
        "links": [
            "b9493939949ef45c",
            "ebd0aaa777084f31"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "046c5bcb558de507",
        "type": "json",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "8c36ac9f6e31416a"
            ]
        ]
    },
    {
        "id": "8c36ac9f6e31416a",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Find Tray",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "d2a10c0f36da40da"
            ]
        ]
    },
    {
        "id": "fc77b3513df59260",
        "type": "mqtt in",
        "z": "e1a1e83b4bc1e188",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "046c5bcb558de507"
            ]
        ]
    },
    {
        "id": "39f4c67dce54e3c7",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Blinky MQTT Setting topic",
        "func": "let trayType = flow.get('trayType');\nlet subscribeTopic = flow.get('box') + \"/\" + trayType + \"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "fc77b3513df59260"
            ]
        ]
    },
    {
        "id": "b9493939949ef45c",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Box Subscribe Setup in",
        "links": [
            "0f5c6efc42e17a0d"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "39f4c67dce54e3c7"
            ]
        ]
    },
    {
        "id": "771efce08087e3d2",
        "type": "mqtt out",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "d2a10c0f36da40da",
        "type": "switch",
        "z": "e1a1e83b4bc1e188",
        "name": "Setting Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "c3b1f5e107f72224"
            ],
            [
                "e0e962979df0a0f9"
            ],
            [
                "0ff3c17b319ca2aa"
            ]
        ]
    },
    {
        "id": "a50b6ac97ee87909",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "d35408de3bf5bbcf"
            ]
        ]
    },
    {
        "id": "c4fc43f290dced9d",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "a66ef2e5b482662a",
            "0b241a6fd179f35d",
            "f0c1e263384a520f",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "1299d0c9d0492110",
            "eb2cec37e2649a83",
            "712ac1d459489d33"
        ],
        "x": 1115,
        "y": 260,
        "wires": [
            [
                "55f37a07a602d06d"
            ]
        ]
    },
    {
        "id": "1299d0c9d0492110",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "eb2cec37e2649a83",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d",
            "04a12df7293d9c10"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "71c3eecb13487ebd",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "82bf1a6381790e53"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "82bf1a6381790e53",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "deviceMQTT publish",
        "links": [
            "71c3eecb13487ebd",
            "aa428318895690ee"
        ],
        "x": 1115,
        "y": 160,
        "wires": [
            [
                "771efce08087e3d2"
            ]
        ]
    },
    {
        "id": "0ff3c17b319ca2aa",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "0b241a6fd179f35d"
            ]
        ]
    },
    {
        "id": "0b241a6fd179f35d",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Continue Devie Readings out",
        "links": [
            "c4fc43f290dced9d",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "9bd935f7e2e7deb1",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('box') + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            [
                "2a83046c9259bbec"
            ]
        ]
    },
    {
        "id": "04a12df7293d9c10",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Archive Tray In",
        "links": [
            "eb2cec37e2649a83",
            "c378bea488900291"
        ],
        "x": 1115,
        "y": 320,
        "wires": [
            [
                "ef0171225df00690"
            ]
        ]
    },
    {
        "id": "2a83046c9259bbec",
        "type": "delay",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "d35408de3bf5bbcf"
            ]
        ]
    },
    {
        "id": "55f37a07a602d06d",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "a50b6ac97ee87909"
            ]
        ]
    },
    {
        "id": "ef0171225df00690",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "9bd935f7e2e7deb1"
            ]
        ]
    },
    {
        "id": "d35408de3bf5bbcf",
        "type": "mqtt out",
        "z": "e1a1e83b4bc1e188",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "e0e962979df0a0f9",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "1299d0c9d0492110"
            ]
        ]
    },
    {
        "id": "895c258a119670fd",
        "type": "mqtt in",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "7ff1e43e3c9dd7c7"
            ]
        ]
    },
    {
        "id": "712ac1d459489d33",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "c4fc43f290dced9d"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "ebd0aaa777084f31",
        "type": "link in",
        "z": "e1a1e83b4bc1e188",
        "name": "Device Subscribe Setup in",
        "links": [
            "0f5c6efc42e17a0d"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "3014cf066d0a918e"
            ]
        ]
    },
    {
        "id": "c378bea488900291",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "04a12df7293d9c10"
        ],
        "x": 1015,
        "y": 500,
        "wires": []
    },
    {
        "id": "d1b4e4f77e6221a3",
        "type": "inject",
        "z": "e1a1e83b4bc1e188",
        "g": "cbfba956c59a29f1",
        "name": "Reload Trays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "initTray",
        "payload": "{\"trayType\":\"blinky-picoW-demo\",\"mqttReadBufferSize\":10}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "a5bd4c3bb16034db"
            ]
        ]
    },
    {
        "id": "c3b1f5e107f72224",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "e6eae5c8a21d720d",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\n// End Custom\nlet blinkyBusMessage = false;\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nswitch(msg.payload.cube)\n{\n    case 'led1':\n        blinkyBusSettingMsg.payload.address = 3;\n        blinkyBusMessage = true;\n        break;\n    case 'led2':\n        blinkyBusSettingMsg.payload.address = 4;\n        blinkyBusMessage = true;\n        break;\n    case 'nonblinkyBusSetting':\n        tray.nonblinkyBusSetting.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    let bufsize = 4;\n    let buffer = new ArrayBuffer(bufsize);\n    let settingsView = new DataView(buffer);\n    settingsView.setUint8(0, 1); //setting\n    settingsView.setUint8(1, blinkyBusSettingMsg.payload.address); //address\n    settingsView.setInt16(2, blinkyBusSettingMsg.payload.value, true); //value\n    let mqttMsg = {topic:blinkyBusSettingMsg.topic, payload:Buffer.from(buffer)};\n    msgArray = [mqttMsg, {topic:'settingDone', payload:tray}];\n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "71c3eecb13487ebd"
            ],
            [
                "eb2cec37e2649a83"
            ]
        ]
    },
    {
        "id": "7ff1e43e3c9dd7c7",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "ef5cb8e350f51d8c",
        "name": "Create Readings",
        "func": "let trayType = flow.get('trayType');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[0].indexOf(trayType) != 0) return null;\nlet trayName = topicSplit[1];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n\nlet serialBufSize = flow.get('mqttReadBufferSize');\nlet dataView     = new DataView(new ArrayBuffer(2));\nlet dataBuffer = [];\nfor (let ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nif (dataBuffer[0] == 1)\n{\n    let initDeviceMsg = {topic:\"initDevice\",payload:tray};\n    return [null, null, initDeviceMsg];\n}\n\n// Start Custom \ntray.watchdog.value  = dataBuffer[1];\ntray.chipTemp.value  = dataBuffer[2] / 100;\ntray.led1.value      = dataBuffer[3];\ntray.led2.value      = dataBuffer[4];\nnewData = true;\n// End custom\n\nif (!newData) return null;\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "712ac1d459489d33"
            ],
            [
                "c378bea488900291"
            ],
            [
                "5e7d2de841bcb0c1"
            ]
        ]
    },
    {
        "id": "3014cf066d0a918e",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = flow.get(\"trayType\") + \"/+/reading\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "895c258a119670fd"
            ]
        ]
    },
    {
        "id": "930b94f38479787c",
        "type": "split",
        "z": "e1a1e83b4bc1e188",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "8353cc62765ebd6d"
            ]
        ]
    },
    {
        "id": "aa428318895690ee",
        "type": "link out",
        "z": "e1a1e83b4bc1e188",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1",
            "82bf1a6381790e53"
        ],
        "x": 1755,
        "y": 560,
        "wires": []
    },
    {
        "id": "5e7d2de841bcb0c1",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "g": "40e56362c23599cc",
        "name": "Init Gizmo",
        "func": "var tray = msg.payload;\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nmsgs[1] = {\"address\":3,\"value\":tray.led1.value};\nmsgs[2] = {\"address\":4,\"value\":tray.led2.value};\nlet publishTopic = tray.type + \"/\" + tray.name + \"/setting\";\nreturn {topic : publishTopic, payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "930b94f38479787c"
            ]
        ]
    },
    {
        "id": "8353cc62765ebd6d",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Prep Gizmo MQTT data",
        "func": "let bufsize = 4;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:msg.topic, payload:Buffer.from(buffer),rate:500};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            [
                "aa428318895690ee"
            ]
        ]
    },
    {
        "id": "5d93334c.7b160c",
        "type": "inject",
        "z": "e1a1e83b4bc1e188",
        "name": "box",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "box",
        "payload": "BOX",
        "payloadType": "env",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "e06b15ee.c3bf78"
            ]
        ]
    },
    {
        "id": "e06b15ee.c3bf78",
        "type": "function",
        "z": "e1a1e83b4bc1e188",
        "name": "Save Env",
        "func": "flow.set(msg.topic, msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 660,
        "wires": []
    }
]